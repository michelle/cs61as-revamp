<h2>Homework 14 (hw14)</h2><b>CS 61A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Week 15</b>
<p>
Topic: Logic programming
<p>
<b>Reading:</b>
Abelson &amp; Sussman, Section 4.4.1-3
<p>
We are not assigning section 4.4.4, which discusses the implementation of the
query system in detail.  Feel free to read it just for interest; besides
deepening your understanding of logic programming, it provides an example of
using streams in a large project.

<p>
<b>Homework:</b>
<p>
Abelson &amp; Sussman, exercises 4.56, 4.57, 4.58, 4.65
<p>
For all problems that involve writing queries or rules,
test your solutions. To run the query system and load in the sample data:

<p>
<tt>  <pre>% stk
&#62; (load "&#126;cs61as/lib/query.scm")
&#62; (initialize-data-base microshaft-data-base)
&#62; (query-driver-loop)
</pre></tt>

<p>
You're now in the query system's interpreter.  To add an assertion:

<p>
<tt>  <pre>(assert! (foo bar))
</pre></tt>

<p>
To add a rule:

<p>
<tt>  <pre>(assert! (rule (foo) (bar)))
</pre></tt>

<p>
Anything else is a query.

<p>
<b>Extra for experts:</b>
<p>
The lecture notes for this week
describe rules that allow inference of the <tt>reverse</tt> relation
in one direction, i.e.,

<p>
<tt>  <pre>;;; Query input:
(forward-reverse (a b c) ?what)

;;; Query results:
(FORWARD-REVERSE (A B C) (C B A))

;;; Query input:
(forward-reverse ?what (a b c))

;;; Query results:
<span class="roman">... infinite loop</span>
</pre></tt>

<p>
or

<p>
<tt>  <pre>;;; Query input:
(backward-reverse ?what (a b c))

;;; Query results:
(BACKWARD-REVERSE (C B A) (A B C))

;;; Query input:
(backward-reverse (a b c) ?what)

;;; Query results:
<span class="roman">... infinite loop</span>
</pre></tt>

<p>
Define rules that allow inference of the <tt>reverse</tt> relation in both
directions, to produce the following dialog:

<p>
<tt>  <pre>;;; Query input:
(reverse ?what (a b c))

;;; Query results:
(REVERSE (C B A) (A B C))

;;; Query input:
(reverse (a b c) ?what)

;;; Query results:
(REVERSE (A B C) (C B A))
</pre></tt>

<p>
<br /><hr />
Unix feature of the week: <tt>perl</tt>, <tt>awk</tt>, <tt>sed</tt>
<p>
Emacs feature of the week: <tt>M-x shell-command-on-region</tt>
<p>
</html>