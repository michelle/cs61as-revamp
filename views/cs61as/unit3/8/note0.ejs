<!-- Lecture Notes 8: Assignment, state and environments -->

<p>
<b>Reading:</b>
Abelson &amp; Sussman, Section
<A href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-20.html#%_sec_3.1">3.1</a>,
<A href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-21.html">3.2</A>;
<A href="http://inst.eecs.berkeley.edu/~cs61as/reader/belowline.pdf">OOP below the line</A>

<p>[My apologies for the large amount of reading in this lesson.  It's because
I've learned that students can't understand 3.1 without reading 3.2 first, and
vice versa.  So you have to read both at once, twice.]

<p>
We said the three big ideas in the OOP interface are message passing,
local state, and inheritance.  You know from section 2.4 how message
passing is implemented below the line in Scheme, i.e., with a dispatch
function that takes a message as argument and returns a method.  This
week we're talking about how local state works.

<p>
A <i>local </i> variable is one that's only available within a particular
part of the program; in Scheme this generally means within a particular
procedure.  We've used local variables before; <tt>let</tt> makes them.
A <i>state </i> variable is one that remembers its value from one invocation
to the next; that's the new part.

<p>
First of all let's look at <i>global </i> state-that is, let's try to
remember some information about a computation but not worry about having
separate versions for each object.

<p>
<tt>  <pre>;;;;;                        In file cs61as/lectures/3.1/count1.scm
(define counter 0)

(define (count)
  (set! counter (+ counter 1))
  counter)

&#62; (count)
1
&#62; (count)
2
</pre></tt>

<p>
What's new here is the special form <tt>set!</tt>&nbsp;that allows us to change the
value of a variable.  This is not like <tt>let</tt>, which creates a temporary,
local binding; this makes a permanent change in some variable that must have
already existed.  The syntax is just like <tt>define</tt> (but not the
abbreviation for defining a function): it takes an unevaluated name and an
expression whose value provides the new value.

<p>
A crucial thing to note about <tt>set!</tt>&nbsp;is that the substitution
model no longer works.  We can't substitute the value of <tt>counter</tt>
wherever we see the name <tt>counter</tt>, or we'll end up with

<p>
<tt>  <pre>(set! 0 (+ 0 1))
0
</pre></tt>

<p>
which doesn't make any sense.  From now on we use a model of variables
that's more like what you learned in 7th grade, in which a variable is a
shoebox in which you can store some value.  The difference from the 7th
grade version is that we can have several shoeboxes with the same name (the
instance variables in the different objects, for example) and we have to
worry about how to keep track of that.  Section 3.2 of A&amp;S explains the
<i>environment </i> model that keeps track for us.

<p>
Another new thing is that a procedure body can include more than one
expression.  In functional programming, the expressions don't <i>do </i>
anything except compute a value, and a function can only return one value,
so it doesn't make sense to have more than one expression in it.  But when
we invoke <tt>set!</tt>&nbsp;there is an <i>effect </i> that lasts beyond the
computation of that expression, so now it makes sense to have that
expression and then another expression that does something else.  When a
body has more than one expression, the expressions are evaluated from left
to right (or top to bottom) and the value returned by the procedure is the
value computed by the last expression.  All but the last are just <i>for
effect</i>.

<p>

<p>
We've seen how to have a global state variable.  We'd like to try for <i>
local </i> state variables.  Here's an attempt that doesn't work:

<p>
<tt>  <pre>;;;;;                        In file cs61as/lectures/3.1/count.lose
(define (count)
  (let ((counter 0))                    &#62; (count)
    (set! counter (+ counter 1))        1
    counter))                           &#62; (count)
                                        1
                                        &#62; (count)
                                        1
</pre></tt>

<p>
It was a good idea to use <tt>let</tt>, because that's a way we know to create
local variables.  But <tt>let</tt> creates a <i>new </i> local variable each
time we invoke it.  Each call to <tt>count</tt> creates a new <tt>counter</tt>
variable whose value is 0.

<p>
The secret is to find a way to call <tt>let</tt> only once, when we <i>
create </i> the <tt>count</tt> function, instead of calling <tt>let</tt> every time
we <i>invoke </i> <tt>count</tt>.  Here's how:

<p>
<tt>  <pre>;;;;;                        In file cs61as/lectures/3.1/count2.scm
(define count
  (let ((result 0))
    (lambda ()
      (set! result (+ result 1))
      result)))
</pre></tt>

<p>
Notice that there are no parentheses around the word <tt>count</tt> on the
first line!  Instead of

<p>
<tt>  <pre>(define count (lambda () (let ...)))
</pre></tt>

<p>
(which is what the earlier version means) we have essentially interchanged
the <tt>lambda</tt> and the <tt>let</tt> so that the former is inside the latter:

<p>
<tt>  <pre>(define count (let ... (lambda () ...)))
</pre></tt>

<p>
We'll have to examine the environment model in detail before you can really
understand why this works.  A handwavy explanation is that the <tt>let</tt>
creates a variable that's available to things in the body of the <tt>let</tt>;
the <tt>lambda</tt> is in the body of the <tt>let</tt>; and so the variable is
available to the function that the <tt>lambda</tt> creates.

<p>
The reason we wanted local state variables was so that we could have more
than one of them.  Let's take that step now.  Instead of having a single
procedure called <tt>count</tt> that has a single local state variable, we'll
write a procedure <tt>make-count</tt> that, each time you call it, makes a
new counter.

<p>
<tt>  <pre>;;;;;                        In file cs61as/lectures/3.1/count3.scm

(define (make-count)                 &#62; (define dracula (make-count))
  (let ((result 0))                  &#62; (dracula)
    (lambda ()                       1
      (set! result (+ result 1))     &#62; (dracula)
      result)))                      2
                                     &#62; (define monte-cristo (make-count))
                                     &#62; (monte-cristo)
                                     1
                                     &#62; (dracula)
                                     3
</pre></tt>

<p>
Each of <tt>dracula</tt> and <tt>monte-cristo</tt> is the result of evaluating the
expression <tt>(lambda&nbsp;()&nbsp;...)</tt> to produce a procedure.  Each of those
procedures has access to its own local state variable called <tt>result</tt>.
<tt>Result</tt> is temporary with respect to <tt>make-count</tt> but permanent
with respect to <tt>dracula</tt> or <tt>monte-cristo</tt>, because the <tt>let</tt> is inside
the <tt>lambda</tt> for the former but outside the <tt>lambda</tt> for the latter.

<p>

<p>
<b>&bull; Environment model of evaluation.</b>

<p>
For now we're just going to introduce the central issues about environments,
leaving out a lot of details.  You'll get those later in this lesson.

<p>
The question is, what happens when you invoke a procedure?  For example,
suppose we've said

<p>
<tt>  <pre>(define (square x) (* x x))
</pre></tt>

<p>
and now we say <tt>(square 7)</tt>; what happens?  The substitution model says

<p>
1.  Substitute the actual argument value(s) for the formal parameter(s) in
the body of the function;

<p>
2.  Evaluate the resulting expression.

<p>
In this example, the substitution of 7 for <tt>x</tt> in <tt>(*&nbsp;x&nbsp;x)</tt> gives
<tt>(*&nbsp;7&nbsp;7)</tt>.  In step 2 we evaluate that expression to get the result 49.

<p>
We now forget about the substitution model and replace it with the
environment model:

<p>
1.  Create a <i>frame </i> with the formal parameter(s) <i>bound to </i> the
actual argument values;

<p>
2.  Use this frame to extend the lexical environment;

<p>
3.  Evaluate the body (without substitution!)&nbsp;in the resulting environment.

<p>
A frame is a collection of name-value associations or <i>bindings</i>.  In our
example, the frame has one binding, from <tt>x</tt> to <tt>7</tt>.

<p>
Skip step 2 for a moment and think about step 3.  The idea is that we are
going to evaluate the expression <tt>(*&nbsp;x&nbsp;x)</tt> but we are refining our
notion of what it means to evaluate an expression.  Expressions are no
longer evaluated in a vacuum, but instead, every evaluation must be done
with respect to some environment&mdash;that is, some collection of bindings
between names and values.  When we are evaluating <tt>(*&nbsp;x&nbsp;x)</tt> and we see
the symbol <tt>x</tt>, we want to be able to look up <tt>x</tt> in our collection
of bindings and find the value <tt>7</tt>.

<p>
Looking up the value bound to a symbol is something we've done before with
global variables.  What's new is that instead of one central collection of
bindings we now have the possibility of <i>local </i> environments.  The
symbol <tt>x</tt> isn't always <tt>7</tt>, only during this one invocation of
<tt>square</tt>.  So, step 3 means to evaluate the expression in the way that
we've always understood, but looking up names in a particular place.

<p>
What's step 2 about?  The point is that we can't evaluate <tt>(*&nbsp;x&nbsp;x)</tt> in
an environment with nothing but the <tt>x</tt>/<tt>7</tt> binding, because we also
have to look up a value for the symbol <tt>*</tt> (namely, the multiplication
function).  So, we create a new frame in step 1, but that frame isn't an
environment by itself.  Instead we use the new frame to <i>extend </i> an
environment that already existed.  That's what step 2 says.

<p>
<i>Which </i> old environment do we extend?  In the <tt>square</tt> example
there is only one candidate, the <i>global </i> environment.  But in more
complicated situations there may be several environments available.
For example:

<p>
<table><tr><td>
<tt>  <pre>
(define (f x)
  (define (g y)
    (+ x y))
  (g 3))

&#62; (f 5)
</pre></tt>
<td align=right><img width=75% src="static/course_material/79/80/9-1.jpg">
</tr></table>

<p>
When we invoke <tt>f</tt>, we create a frame (call it F1) in which <tt>x</tt> is
bound to <tt>5</tt>.  We use that frame to extend the global environment (call
it G), creating a new environment E1.  Now we evaluate the body of <tt>f</tt>,
which contains the internal definition for <tt>g</tt> and the expression
<tt>(g&nbsp;3)</tt>.  To invoke <tt>g</tt>, we create a frame in which <tt>y</tt> is bound
to 3.  (Call this frame F2.)  We are going to use F2 to extend some old
environment, but which?  G or E1?  The body of <tt>g</tt> is the expression
<tt>(+&nbsp;x&nbsp;y)</tt>.  To evaluate that, we need an envoironment in which we can
look up all of <tt>+</tt> (in G), <tt>x</tt> (in F1), and <tt>y</tt> (in F2).  So
we'd better make our new environment by extending E1, not by extending G.

<p>
The example with <tt>f</tt> and <tt>g</tt> shows, in a very simple way, why the
question of multiple environments comes up.  But it still doesn't show us
the full range of possible rules for choosing an environment.  In the <tt>
f</tt> and <tt>g</tt> example, the environment where <tt>g</tt> is defined is the same
as the environment from which it's invoked.  But that doesn't always have
to be true:

<p>
<table><tr><td>
<tt>  <pre>
(define (make-adder n)
  (lambda (x) (+ x n)))

(define 3+ (make-adder 3))

(define n 7)

&#62; (3+ n)
</pre></tt>
<td align=right><img width=75% src="static/course_material/79/80/9-2.jpg">
</tr></table>

<p>When we invoke <tt>make-adder</tt>, we create the environment E1 in which <tt>
n</tt> is bound to <tt>3</tt>.  In the global environment G, we bind <tt>n</tt>
to <tt>7</tt>.  When we evaluate the expression <tt>(3+ n)</tt>, what environment
are we in?  What value does <tt>n</tt> have in this expression?  Surely it
should have the value <tt>7</tt>, the global value.  So we evaluate expressions
that you type in G.  When we invoke <tt>3+</tt> we create the frame F2
in which <tt>x</tt> is bound to <tt>7</tt>.  (Remember, <tt>3+</tt> is the function
that was created by the <tt>lambda</tt> inside <tt>make-adder</tt>.

<p>
We are going to use F2 to extend some environment, and in the resulting
environment we'll evaluate the body of <tt>3+</tt>, namely <tt>(+&nbsp;x&nbsp;n)</tt>.
What value should <tt>n</tt> have in <em>this</em> expression?  It had better have
the value <tt>3</tt> or we've defeated the purpose of <tt>make-adder</tt>.
Therefore, the rule is that we do <i>not </i> extend the <i>current </i>
environment at the time the function is invoked, which would be G in this
case.  Rather, we extend the environment in which the function was <i>
created</i>, i.e., the environment in which we evaluated the <tt>lambda</tt>
expression that created it.  In this case that's E1, the environment that
was created for the invocation of <tt>make-adder</tt>.

<p>
Scheme's rule, in which the procedure's defining environment is extended, is
called <i>lexical </i> scope.  The other rule, in which the current
environment is extended, is called <i>dynamic </i> scope.  We'll see in
project 4 that a language with dynamic scope is possible, but it would
have different features from Scheme.

<p>
Remember why we needed the environment model:  We want to understand local
state variables.  The mechanism we used to create those variables was

<p>
<tt>  <pre>(define some-procedure
  (let ((state-var initial-value))
    (lambda (...) ...)))
</pre></tt>

<p>
Roughly speaking, the <tt>let</tt> creates a frame with a binding for <tt>
state-var</tt>.  Within that environment, we evaluate the <tt>lambda</tt>.  This
creates a procedure within the scope of that binding.  Every time that
procedure is invoked, the environment where it was created&mdash;that is,
the environment with <tt>state-var</tt> bound&mdash;is extended to form the
new environment in which the body is evaluated.  These new environments come
and go, but the state variable isn't part of the new frames; it's part of
the frame in which the procedure was defined.  That's why it sticks around.

<p>

<p>
<b>&bull; Here are the complete rules for the environment model:</b>

<p>
Every expression is either an atom or a list.

<p>
At any time there is a <i>current frame</i>, initially the global frame.

<p>
<ol type="I">
<li>Atomic expressions.<p>
<ol type="A">
<li>Numbers, strings, <tt>#T</tt>, and <tt>#F</tt> are self-evaluating.<p>
<li>If the expression is a symbol, find the <i>first
available </i> binding.  (That is, look in the current frame; if not found
there, look in the frame "behind" the current frame; and so on until the
global frame is reached.)
</ol><p>
<li>Compound expressions (lists).
<p>If the car of the expression is a symbol that names a special form, then
follow its rules (II.B below).  Otherwise the expression is a procedure
invocation.
<ol type="A">
<li>Procedure invocation.
<p>Step 1:  Evaluate all the subexpressions (using these same rules).
<p>Step 2:  Apply the procedure (the value of the first subexpression)
to the arguments (the values of the other subexpressions).
<ol type="a">
<li>If the procedure is compound (user-defined):
<ol>
<li>Create a frame with the formal parameters of the procedure
bound to the actual argument values.
<li>Extend the procedure's defining environment with this
new frame.
<li>Evaluate the procedure body, using the new frame as
the current frame.
<p><b>*** ONLY COMPOUND PROCEDURE INVOCATION CREATES A FRAME ***</b>
</ol>
<li>If the procedure is primitive:
<p>&nbsp;&nbsp;&nbsp;Apply it by magic.
</ol>
<li>Special forms.<p>
<ol>
<li><tt>Lambda</tt> creates a procedure.  The left circle points to the text
of the <tt>lambda</tt> expression; the right circle points to the
defining environment, i.e., to the current environment at the
time the <tt>lambda</tt> is seen.
<p><b>*** ONLY <tt>LAMBDA</tt> CREATES A PROCEDURE ***</b><p>
<li><tt>Define</tt> adds a <i>new </i> binding to the <i>current frame</i>.<p>
<li><tt>Set!</tt>&nbsp;changes the <i>first available </i> binding (see I.B
for the definition of "first available").<p>
<li><tt>Let</tt> = <tt>lambda</tt> (II.B.1) + invocation (II.A)<p>
<li><tt>(define (...) ...)</tt> = <tt>lambda</tt> (II.B.1) + <tt>define</tt>
(II.B.2)<p>
<li>Other special forms follow their own rules (<tt>cond</tt>, <tt>if</tt>).
</ol></ol></ol>

<p>
<b>&bull; Environments and OOP.</b>

<p>
Class and instance variables are both local state variables, but in
different environments:

<p>
<tt>  <pre>;;;;;                        In file cs61as/lectures/3.2/count4.scm
(define make-count
  (let ((glob 0))
    (lambda ()
      (let ((loc 0))
        (lambda ()
          (set! loc (+ loc 1))
          (set! glob (+ glob 1))
          (list loc glob))))))
</pre></tt>

<p>
The class variable <tt>glob</tt> is created in an environment that surrounds
the creation of the outer <tt>lambda</tt>, which represents the entire class.
The instance variable <tt>loc</tt> is created in an environment that's inside
the class <tt>lambda</tt>, but outside the second <tt>lambda</tt> that represents
an instance of the class.

<p>
The example above shows how environments support state variables in OOP, but
it's simplified in that the instance is not a message-passing dispatch
procedure.  Here's a slightly more realistic version:

<p>
<tt>  <pre>;;;;;                        In file cs61as/lectures/3.2/count5.scm
(define make-count
  (let ((glob 0))
    (lambda ()
      (let ((loc 0))
        (lambda (msg)
          (cond ((eq? msg 'local)
                 (lambda ()
                   (set! loc (+ loc 1))
                   loc))
                ((eq? msg 'global)
                 (lambda ()
                   (set! glob (+ glob 1))
                   glob))
                (else (error "No such method" msg)) ))))))
</pre></tt>

<p>
The structure of alternating <tt>let</tt>s and <tt>lambda</tt>s is the same, but
the inner <tt>lambda</tt> now generates a dispatch procedure.  Here's how we
say the same thing in OOP notation:

<p>
<tt>  <pre>;;;;;                        In file cs61as/lectures/3.2/count6.scm
(define-class (count)
  (class-vars (glob 0))
  (instance-vars (loc 0))
  (method (local)
    (set! loc (+ loc 1))
    loc)
  (method (global)
    (set! glob (+ glob 1))
    glob))
</pre></tt></p>