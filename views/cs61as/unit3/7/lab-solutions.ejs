<pre>
CS 61A		Week 7 solutions

LAB:

1.  Add REPEAT to person class.

(define-class (person name)
  (INSTANCE-VARS (OLD-TEXT '()))
  (method (say stuff)
    (SET! OLD-TEXT STUFF)
    stuff)
  (method (ask stuff) (ask self 'say (se '(would you please) stuff)))
  (method (greet) (ask self 'say (se '(hello my name is) name)))
  (METHOD (REPEAT) OLD-TEXT))

Notice that the ASK and GREET methods don't have to set old-text,
because they use the SAY method.

Some people solved this simply by naming their instance variable REPEAT,
which automatically gives you a REPEAT method. This is fine.


2. Which double-talkers work?

The answer to this question depends on how you implemented REPEAT. Most people
implement it as above (just return OLD-TEXT). But some people, reasonably,
implement it like this instead:

(method (repeat) (ask self 'say old-text))

This affects how each DOUBLE-TALKER behaves.


(define-class (double-talker name)
  (parent (person name))
  (method (say stuff) (se (usual 'say stuff) (ask self 'repeat))) )

There are two things wrong with this approach.  One is that it assumes
that the two arguments to SE are evaluated left-to-right, since the
use of REPEAT assumes that we've just said the new stuff.  That might
work in some versions of Scheme but not in others.

The second problem is that the value remembered in old-text will be
a single copy of the argument, rather than two copies; therefore, if
we ask this double-talker to repeat, it'll only say the thing once.

If you implemented REPEAT using SAY, this would be a big problem, since the SAY
method calls REPEAT and REPEAT calls SAY. Infinite recursion!


(define-class (double-talker name)
  (parent (person name))
  (method (say stuff) (se stuff stuff)) )

This would work except for the REPEAT feature.  We can ask a double-talker
to ASK or to GREET and it will correctly say the right thing twice.  But
if we ask this double-talker to REPEAT, it won't say anything at all,
because it never remembered the stuff in old-text.


(define-class (double-talker name)
  (parent (person name))
  (method (say stuff) (usual 'say (se stuff stuff))) )

This one works as desired, unless you implemented REPEAT with SAY. If you did,
then each REPEAT will end up doubling the output:

> (ask some-double-talker 'say '(hello))
(hello hello)
> (ask some-double-talker 'repeat)
(hello hello hello hello)
> (ask some-double-talker 'repeat)
(hello hello hello hello hello hello hello hello)

...and so on.

</pre>