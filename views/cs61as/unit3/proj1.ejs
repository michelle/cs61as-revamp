<h2>PART II:</h2>

<p>
This part of the project includes three exercises for each person, but YOU
HAVE TO READ EACH OTHER'S CODE midweek, because one partner's exercises 7 and
8 build on the other partner's exercise 6.  Finally, exercise 9 requires the
two partners' work to be combined.  You will have to create a version of
adv.scm that has both partners' changes.  This may take some thinking!  If
both parners modify the same method in the same object class, you'll have to
write a version of the method that incorporates both modifications.
</p>

<br />
<h2>PART II, PERSON A:</h2>

<p>
Adv.scm includes a definition of the class THIEF, a subclass of person.
A thief is a character who tries to steal food from other people.  Of
course, Berkeley can not tolerate this behavior for long.  Your job is to
define a POLICE class; police objects catch thieves and send them directly
to jail.  To do this you will need to understand how theives work.
</p>

<p>
Since a thief is a kind of person, whenever another person enters the place
where the thief is, the thief gets a NOTICE message from the place.  When
the thief notices a new person, he does one of two things, depending on the
state of his internal BEHAVIOR variable.  If this variable is set to STEAL,
the thief looks around to see if there is any food at the place.  If there
is food, the thief takes the food from its current possessor and sets his
behavior to RUN.  When the thief's behavior is RUN, he moves to a new random
place whenever he NOTICEs someone entering his current location.  The RUN
behavior makes it hard to catch a thief.
</p>

<p>
Notice that a thief object delegates many messages to its person object.
</p>

<p>
A6a.  To help the police do their work, you will need to create a place called
jail.  Jail has no exits.  Moreover, you will need to create a method for
persons and thieves called GO-DIRECTLY-TO.  Go-directly-to does not require
that the new-place be adjacent to the current-place.  So by calling (ASK
THIEF 'GO-DIRECTLY-TO JAIL) the police can send the thief to jail no matter
where the thief currently is located, assuming the variable thief is bound
to the thief being apprehended.
</p>

<p>
A6b.  Thieves sometimes try to leave their place in a randomly chosen
direction.  This, it turns out, won't work if there are no exits from
that place -- for example, the jail.  Modify the THIEF class so that
a thief won't try to leave a place with no exits.
</p>

<p>
** Now get your partner to explain problem B6 and its solution. **
</p>

<p>
A7a.  We are now going to invent restaurant objects.  People will interact
with the restaurants by buying food there.  First we have to make it possible
for people to buy stuff.  Give PERSON objects a MONEY property, which is a
number, saying how many dollars they have.  Note that money is not an
object.  We implement it as a number because, unlike the case of objects
such as chairs and potstickers, a person needs to be able to spend SOME
money without giving up all of it.  In principle we could have objects like
QUARTER and DOLLAR-BILL, but this would make the change-making process
complicated for no good reason.
</p>

<p>
To make life simple, we'll have every PERSON start out with $100.  (We should
really start people with no money, and invent banks and jobs and so on, but
we won't.)  Create two methods for people, GET-MONEY and PAY-MONEY, each of
which takes a number as argument and updates the person's money value
appropriately.  PAY-MONEY must return true or false depending on whether
the person had enough money.
</p>

<p>
A7b.  Another problem with the adventure game is that Noah's only has one
bagel.  Once someone has taken that bagel, they're out of business.
</p>

<p>
To fix this, we're going to invent a new kind of place, called a RESTAURANT.
(That is, RESTAURANT is a subclass of PLACE.)  Each restaurant serves only
one kind of food.  (This is a simplification, of course, and it's easy to see
how we might extend the project to allow lists of kinds of food.)  When a
restaurant is instantiated, it should have two extra arguments, besides the
ones that all places have: the class of food objects that this restaurant
sells,  and the price of one item of this type:
</p>

<pre>
   > (define-class (bagel) (parent (food ...)) ...)

   > (define Noahs (instantiate restaurant 'Noahs bagel 0.50))
</pre>

<p>
Notice that the argument to the restaurant is a CLASS, not a particular
bagel (instance).
</p>

<p>
Restaurants should have two methods.  The MENU method returns a list
containing the name and price of the food that the restaurant sells.
The SELL method takes two arguments, the person who wants to buy something
and the name of the food that the person wants.  The SELL method must first
check that the restaurant actually sells the right kind of food.  If so,
it should ASK the buyer to PAY-MONEY in the appropriate amount.  If that
succeeds, the method should instantiate the food class and return the new
food object.  The method should return #F if the person can't buy the food.
</p>

<p>
A8.  Now we need a BUY method for people.  It should take as argument the
name of the food we want to buy:  (ask Brian 'buy 'bagel).  The method must
send a SELL message to the restaurant.  If this succeeds (that is, if the
value returned from the SELL method is an object rather than #F) the new food
should be added to the person's possessions.
</p>

<p>
--- Person A skip to question 9 below.
</p>

<br />
<h2>PART II, PERSON B:</h2>

<p>
B6.  The way we're having people take food from restaurants is unrealistic
in several ways.  Our overall goal this week is to fix that.  As a first
step, you are going to create a FOOD class.
We will give things that are food two properties, an EDIBLE? property
and a CALORIES property.  EDIBLE?  will have the value #T if the object is a
food.  If a PERSON eats some food, the food's CALORIES are added to the
person's STRENGTH.
</p>

<p>
(Remember that the EDIBLE? property will automatically be false for objects
other than food, because of the way properties were implemented in question B4.
You don't have to go around telling all the other stuff not to be edible
explicitly.)
</p>

<p>
Write a definition of the FOOD class that uses THING as the parent class.
It should return #T when you send it an EDBILE? message, and it should
correctly respond to a CALORIES message.
</p>

<p>
Replace the procedure named EDIBLE? in the original adv.scm with a new
version that takes advantage of the mechanism you've created, instead of
relying on a built-in list of types of food.
</p>

<p>
Now that you have the FOOD class, invent some child classes for particular
kinds of food.  For example, make a bagel class that inherits from FOOD.
Give the bagel class a class-variable called NAME whose value is the word
bagel.  (We'll need this later when we invent RESTAURANT objects.)
</p>

<p>
Make an EAT method for people.  Your EAT method should look at your
possessions and filter for all the ones that are edible.  It should then add
the calorie value of the foods to your strength.  Then it should make the
foods disappear (no longer be your possessions and no longer be at your
location).
</p>

<p>
** Now get your partner to explain problem A6 and its solution. **
</p>

<p>
B7.  Your job is to define the police class.  A policeperson is to have the
following behavior:
</p>

<p>
The police stays at one location.  When the police notices a new person
entering the location, the police checks to see if that person is a thief.
If the person is a thief the police says "Crime Does Not Pay," then takes
away all the thief's possessions and sends the thief directly to jail.
</p>

<p>
Give thieves and police default strengths.  Thieves should start out stronger
than persons, but police should be stronger than thieves.  Of course, if you
eat lots you should be able to build up enough STRENGTH (mass?) to take food
away from a thief.  (Only a character with a lot of CHUTZPAH would take food
away from the police. :-)
</p>

<p>
Please test your code and turn in a transcript that shows the thief stealing
your food, you chasing the thief and the police catching the thief.  In case
you haven't noticed, we've put a thief in Sproul Plaza.
</p>

<p>
B8.  Now we want to reorganize TAKE so that it looks to see who previously
possesses the desired object.  If its possessor is 'NO-ONE, go ahead and
take it as always.  Otherwise, invoke
</p>

<pre>
	(ask thing 'MAY-TAKE? receiver)
</pre>

<p>
The MAY-TAKE? method for a thing that belongs to someone should compare
the strength of its owner with the strength of the requesting person to
decide whether or not it can be taken.  The method should return #F
if the person may not take the thing, or the thing itself if the person may
take it.  This is a little more complicated than necessary right now, but
we are planning ahead for a situation in which, for example, an object
might want to make a clone of itself for a person to take.
</p>

<p>
Note the flurry of message-passing going on here.  We send a message to the
taker.  It sends a message to the thing, which sends messages to two people
to find out their strengths.
</p>

<p>
--- End of Part II, Person B (but both partners do question 8 below).
</p>

<p>
9.  Combine the two partners' work.  For example, both partners have
created new methods for the PERSON class.  Both partners have done work
involving strengths of kinds of people; make sure they work together.
</p>

<p>
Now make it so that when a POLICE person asks to BUY some food the
restaurant doesn't charge him or her any money.  (This makes the game
more realistic...)
</p>

<br />
<h2>******** OPTIONAL **********</h2>
<p>
As you can imagine, this is a truly open-ended project.  If you have the
time and inclination, you can populate your world with new kinds of people
(e.g., punk-rockers), places (Gilman-St), and especially things (magic
wands, beer, gold pieces, cars looking for parking places...).
</p>

<p>
For your enjoyment we have developed a procedure that creates a labyrinth (a
maze) that you can explore.  To do so, load the file ~cs61a/lib/labyrinth.scm.
[Note: labyrinth.scm may need some modification to work with the procedures
you developed in part two of the project.]
</p>

<p>
Legend has it that there is a vast series of rooms underneath Sproul Plaza.
These rooms are littered with food of bygone days and quite a few theives.
You can find the secret passage down in Sproul Plaza.
</p>

<p>
You may want to modify FANCY-MOVE-LOOP so that you can look around in nearby
rooms before entering so that you can avoid thieves.  You might also want
your character to maintain a list of rooms visited on its property list so
you can find your way back to the earth's surface.
</p>