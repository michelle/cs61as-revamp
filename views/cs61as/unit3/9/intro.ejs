<!-- Introduction 9: Mutable data, vectors -->

<p>
Chapter&nbsp;2 dealt with compound data as a means for constructing
computational objects that have several parts, in order to model
real-world objects that have several aspects.  In that chapter we
introduced the discipline of data abstraction, according to which data
structures are specified in terms of constructors, which create data
objects, and selectors, which access the parts of compound data
objects.  But we now know that there is another aspect of data that
chapter&nbsp;2 did not address.  The desire to model systems composed of
objects that have changing state leads us to the need to modify
compound data objects, as well as to construct and select from them.
In order to model compound objects with changing state, we will design
data abstractions to include, in addition to selectors and
constructors, operations called <a name="%_idx_3130"></a><em>mutators</em>, which modify data
objects.  For instance, modeling a banking system requires us to
change account balances.  Thus, a data structure for representing bank
accounts might admit an operation<p> 
 
<p><p><tt>(set-balance!&nbsp;&lt;<em>account</em>&gt;&nbsp;&lt;<em>new-value</em>&gt;)<br> 
</tt><p><p> 
that changes the balance of the designated account to the designated
new value.  Data objects for which mutators are defined are known as
<em>mutable data objects</em>.<p> 
 
Chapter&nbsp;2 introduced pairs as a general-purpose "glue" for
synthesizing compound data.  We begin this section by defining basic
mutators for pairs, so that pairs can serve as building blocks for
constructing mutable data objects.  These mutators greatly enhance the
representational power of pairs, enabling us to build data structures
other than the sequences and trees that we worked with in
section&nbsp;2.2.  We also present some examples of
simulations in which complex systems are modeled as collections of
objects with local state.<p></p>