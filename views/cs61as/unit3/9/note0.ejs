<!-- Lecture Notes 9: Mutable data, vectors -->

<p>
<b>Reading:</b>
Abelson &amp; Sussman, 
<a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%_sec_3.3">
Section 3.3.1-3</a>
<p>
Play the animal game:

<p>
<tt>  <pre>&#62; (load "lectures/3.3/animal.scm")<!--hbox-->
#f
&#62; (animal-game)<!--hbox-->
Does it have wings? no<!--hbox-->
Is it a rabbit? no<!--hbox-->

I give up, what is it? gorilla<!--hbox-->

Please tell me a question whose answer is YES for a gorilla
and NO for a rabbit.
Enclose the question in quotation marks.
"Does it have long arms?"<!--hbox-->
"Thanks.  Now I know better."
&#62; (animal-game)<!--hbox-->
Does it have wings? no<!--hbox-->
Does it have long arms? no<!--hbox-->
Is it a rabbit? yes<!--hbox-->
&#207; win!"
</pre></tt>

<p>
The crucial point about this program is that its behavior changes each time
it learns about a new animal.  Such <i>learning </i> programs have to modify
a data base as they run.  We represent the animal game data base as a tree;
we want to be able to splice a new branch into the tree (replacing what used
to be a leaf node).

<p>
Changing what's in a data structure is called <i>mutation</i>.  Scheme
provides primitives <tt>set-car!</tt>&nbsp;and <tt>set-cdr!</tt>&nbsp;for this purpose.

<p>
They aren't special forms!  The pair that's being mutated must be located
by computing some expression.  For example, to modify the second element
of a list:

<p>
<tt>  <pre>(set-car! (cdr lst) 'new-value)
</pre></tt>

<p>
They're different from <tt>set!</tt>, which changes the binding of a variable.
We use them for different purposes, and the syntax is different.  Still,
they are connected in two ways:  (1) Both make your program non-functional,
by making a permanent change that can affect later procedure calls.  (2) Each
can be implemented in terms of the other; the book shows how to use local
state variables to simulate mutable pairs, and later we'll see how the Scheme
interpreter uses mutable pairs to implement environments, including the use
of <tt>set!</tt>&nbsp;to change variable values.

<p>
The only purpose of mutation is efficiency.  In principle we could write the
animal game functionally by recopying the entire data base tree each time,
and using the new one as an argument to the next round of the game.  But the
saving can be quite substantial.

<p>
<b>Identity.</b> Once we have mutation we need a subtler view of the idea of
equality.  Up to now, we could just say that two things are equal if they
look the same.  Now we need <i>two </i> kinds of equality, that old kind
plus a new one:  Two things are <i>identical </i> if they are the very same
thing, so that mutating one also changes the other.  Example:

<p>
<tt>  <pre>&#62; (define a (list 'x 'y 'z))
&#62; (define b (list 'x 'y 'z))
&#62; (define c a)
&#62; (equal? b a)
#T
&#62; (eq? b a)
#F
&#62; (equal? c a)
#T
&#62; (eq? c a)
#T
</pre></tt>

<p>
The two lists <tt>a</tt> and <tt>b</tt> are equal, because they print the same,
but they're not identical.  The lists <tt>a</tt> and <tt>c</tt> are identical;
mutating one will change the other:

<p>
<tt>  <pre>&#62; (set-car! (cdr a) 'foo)
&#62; a
(X FOO Z)
&#62; b
(X Y Z)
&#62; c
(X FOO Z)
</pre></tt>

<p>
If we use mutation we have to know what shares storage with what.  For
example, <tt>(cdr&nbsp;a)</tt> shares storage with <tt>a</tt>.  <tt>(Append&nbsp;a&nbsp;b)</tt>
shares storage with <tt>b</tt> but not with <tt>a</tt>.  (Why not?  Read the
<tt>append</tt> procedure.)

<p>
The Scheme standard says you're not allowed to mutate quoted constants.
That's why I said <tt>(list&nbsp;'x&nbsp;'y&nbsp;'z)</tt> above and not <tt>'(x&nbsp;y&nbsp;z)</tt>.  The
text sometimes cheats about this.  The reason is that Scheme implementations
are allowed to share storage when the same quoted constant is used twice in
your program.

<p>
Here's the animal game:

<p>
<tt>  <pre>;;;;;                        In file cs61as/lectures/3.3/animal.scm
(define (animal node)
  (define (type node) (car node))
  (define (question node) (cadr node))
  (define (yespart node) (caddr node))
  (define (nopart node) (cadddr node))
  (define (answer node) (cadr node))
  (define (leaf? node) (eq? (type node) 'leaf))
  (define (branch? node) (eq? (type node) 'branch))
  (define (set-yes! node x)
    (set-car! (cddr node) x))
  (define (set-no! node x)
    (set-car! (cdddr node) x))

  (define (yorn)
    (let ((yn (read)))
      (cond ((eq? yn 'yes) #t)
            ((eq? yn 'no) #f)
            (else (display "Please type YES or NO")
                  (yorn)))))
</pre></tt>

<p>
<tt>  <pre>  (display (question node))
  (display " ")
  (let ((yn (yorn)) (correct #f) (newquest #f))
    (let ((next (if yn (yespart node) (nopart node))))
      (cond ((branch? next) (animal next))
            (else (display &#207;s it a ")
                  (display (answer next))
                  (display "? ")
                  (cond ((yorn) &#207; win!")
                        (else (newline)
                              (display &#207; give up, what is it? ")
                              (set! correct (read))
                              (newline)
                               (display "Please tell me a question whose answer ")
                              (display &#239;s YES for a ")
                              (display correct)
                              (newline)
                              (display &#228;nd NO for a ")
                              (display (answer next))
                              (display ".")
                              (newline)
                              (display &#203;nclose the question in quotation marks.")
                              (newline)
                              (set! newquest (read))
                              (if yn
                                  (set-yes! node (make-branch newquest
                                                           (make-leaf correct)
                                                           next))
                                  (set-no! node (make-branch newquest
                                                          (make-leaf correct)
                                                          next)))
                              "Thanks.  Now I know better.")))))))

(define (make-branch q y n)
  (list 'branch q y n))

(define (make-leaf a)
  (list 'leaf a))

(define animal-list
  (make-branch "Does it have wings?"
               (make-leaf 'parrot)
               (make-leaf 'rabbit)))

(define (animal-game) (animal animal-list))
</pre></tt>

<p>
Things to note:  Even though the main structure of the program is sequential
and BASIC-like, we haven't abandoned data abstraction.  We have
constructors, selectors, and <i>mutators </i>-a new idea-for the nodes
of the game tree.

<p>

<p>
<b>&bull; Tables.</b>  We're now ready to understand how to implement the <tt>
put</tt> and <tt>get</tt> procedures that A&amp;S used at the end of chapter 2.  A
table is a list of key-value pairs, with an extra element at the front just
so that adding the first entry to the table will be no diffferent from
adding later entries.  (That is, even in an "empty" table we have a pair
to <tt>set-cdr!</tt>)

<p>
<tt>  <pre>;;;;;                        In file cs61as/lectures/3.3/table.scm
(define (get key)
  (let ((record (assoc key (cdr the-table))))
    (if (not record)
        #f
        (cdr record))))

(define (put key value)
  (let ((record (assoc key (cdr the-table))))
    (if (not record)
        (set-cdr! the-table
                  (cons (cons key value)
                        (cdr the-table)))
        (set-cdr! record value)))
  'ok)

(define the-table (list '*table*))
</pre></tt>

<p>
<tt>Assoc</tt> is in the book:

<p>
<tt>  <pre>(define (assoc key records)
  (cond ((null? records) #f)
        ((equal? key (caar records)) (car records))
        (else (assoc key (cdr records))) ))
</pre></tt>

<p>
In chapter 2, A&amp;S provided a single, global table, but we can generalize
this in the usual way by taking an extra argument for which table to use.
That's how <tt>lookup</tt> and <tt>insert!</tt>&nbsp;work.

<p>
One little detail that always confuses people is why, in creating
two-dimensional tables, we don't need a <tt>*table*</tt> header on each of the
subtables.  The point is that <tt>lookup</tt> and <tt>insert!</tt>&nbsp;don't pay any
attention to the <tt>car</tt> of that header pair; all they need is to
represent a table by <i>some </i> pair whose cdr points to the actual list
of key-value pairs.  In a subtable, the key-value pair from the top-level
table plays that role.  That is, the entire subtable is a value of some
key-value pair in the main table.  What it means to be "the value of a
key-value pair" is to be the <tt>cdr</tt> of that pair.  So we can think of
that pair as the header pair for the subtable.

<p>
<center><img width=100% src="/resources/10-1.jpg"></center>

<p>
<b>&bull;Memoization.</b>  Exercise 3.27 is a pain in the neck because it asks
for a very complicated environment diagram, but it presents an extremely
important idea.  If we take the simple Fibonacci number program:

<p>
<tt>  <pre>;;;;;                        In file cs61as/lectures/3.3/fib.scm
(define (fib n)
  (if (&lt; n 2)
      1
      (+ (fib (- n 1))
         (fib (- n 2)) )))
</pre></tt>

<p>
we recall that it takes &Theta;(2<sup>n</sup>) time because it ends up doing a lot of
subproblems redundantly.  For example, if we ask for <tt>(fib&nbsp;5)</tt> we end up
computing <tt>(fib&nbsp;3)</tt> twice.  We can fix this by <i>remembering </i> the
values that we've already computed.  The book's version does it by entering
those values into a local table.  It may be simpler to understand this
version, using the global get/put:

<p>
<tt>  <pre>;;;;;                        In file cs61as/lectures/3.3/fib.scm
(define (fast-fib n)
  (if (&lt; n 2)
      n                              ; base case unchanged
      (let ((old (get 'fib n)))
        (if (number? old)            ; do we already know the answer?
            old
            (begin                   ; if not, compute and learn it
             (put 'fib n (+ (fast-fib (- n 1))
                            (fast-fib (- n 2))))
             (get 'fib n))))))
</pre></tt>

<p>
Is this functional programming?  That's a more subtle question than it seems.
Calling <tt>memo-fib</tt> makes
a permanent change in the environment, so that a second call to <tt>
memo-fib</tt> with the same argument will carry out a very different (and much
faster) process.  But the new process will get the same answer!  If we look
inside the box, <tt>memo-fib</tt> works non-functionally.  But if we look only
at its input-output behavior, <tt>memo-fib</tt> <i>is </i> a function because
it always gives the same answer when called with the same argument.

<p>
What if we tried to memoize <tt>random</tt>?  It would be a disaster; instead
of getting a random number each time, we'd get the same number repeatedly!
Memoization only makes sense if the underlying function really <i>is </i>
functional.

<p>
This idea of using a non-functional implementation for something that has
functional behavior will be very useful later when we look at streams.

<p>

<p>
<b>&bull;&bull; VECTORS.</b>
So far we have seen one primitive data aggregation mechanism:&nbsp;the
pair.  We use linked pairs to represent <i>sequences </i> (an abstract
type) in the form of <i>lists</i>.

<p>
The list suffers from one important weakness:  Finding the <em>n</em>th
element of a list takes time &Theta;(<em>n</em>) because you have to call
<tt>cdr</tt> <em>n</em>&minus;1 times.  Scheme, like most programming languages,
also provides a primitive aggregation mechanism without this
weakness.  In Scheme it's called a <i>vector </i>; in many other
languages it's called an <i>array,</i> but it's the same idea.
Finding the <em>n</em>th element of a vector takes &Theta;(1) time.

<p>
<b>&bull; Vector primitives</b>

<p>
Some of the procedures for vectors are exact analogs to procedures
for lists:

<p>
<tt>  <pre>    (vector a b c d ...)               (list a b c d ...)
    (vector-ref vec n)                 (list-ref lst n)
    (vector-length vec)                (length lst)
</pre></tt>

<p>
Most notably, the <i>selector </i> for vectors, <tt>vector-ref</tt>,
is just like the selector for lists (except that it's faster).

<p>
What about constructors?  There's a <tt>vector</tt> procedure, just
like the <tt>list</tt> procedure, that's good for situations in which
you know exactly how many elements the sequence will have, and all
of the element values, all at once.  But there are no vector
analogs to the list constructors <tt>cons</tt> and <tt>append</tt>,
which are useful for <i>extending </i> lists.  In particular,
<tt>cons</tt> is the workhorse of recursive list processing procedures;
we'll see that vector processing is done quite differently.

<p>
The weakness of vectors is that they can't be extended.  You have
to know the length of the vector when you create it.  So instead
of <tt>cons</tt> and <tt>append</tt> we have

<p>
<tt>  <pre>(make-vector len)
</pre></tt>

<p>
which creates a vector of length <tt>len</tt>, in which the element
values are unspecified.  (You then use mutation, discussed below,
to fill in the desired values.)  Alternatively, if you want to create a
vector in which every element has the same initial value, you can say

<p>
<tt>  <pre>(make-vector len value)
</pre></tt>

<p>
Because vectors are created all at once, rather than one element
at a time, <i>mutation </i> is crucial to any useful vector program.
The primitive mutator for vectors is

<p>
<tt>  <pre>(vector-set! vec n value)
</pre></tt>

<p>
This procedure is comparable to <tt>set-car!</tt>&nbsp;and <tt>set-cdr!</tt>&nbsp;for
pairs.  (It's interesting to note that Scheme doesn't provide a mutator
for the <em>n</em>th element of a list; this is because most list processing
is done using functional programming style, and pair mutation is
mainly for special cases such as tables.)

<p>
The printed format of a vector is

<p>
<tt>  <pre>#(a b c d)
</pre></tt>

<p>
You can quote this to include a constant vector in a program.  (Note: In STk,
vectors are self-evaluating, so you can omit the quotation mark, but this is a
nonstandard extension to Scheme.)

<p>
Scheme also provides functions <tt>list-&#62;vector</tt> and <tt>vector-&#62;list</tt>
that let you convert between the two sequence implementations.

<p>

<p>
<b>&bull; Vector programming style</b>

<p>
Let's write a mapping function for vectors; it will take a function
and a vector as arguments, and return a vector.

<p>
For reference, here's the <tt>map</tt> function for lists:

<p>
<tt>  <pre>(define (map fn lst)
  (if (null? lst)
      '()
      (cons (fn (car lst))
	    (map fn (cdr lst)))))
</pre></tt>

<p>
To do the same task for vectors, we must first create a new
vector of the same length as the argument vector, then fill
in the values using mutation:

<p>
<tt>  <pre>;;;;;                         In file cs61as/lectures/vector.scm
(define (vector-map fn vec)
  (define (loop newvec n)
    (if (&lt; n 0)
	newvec
	(begin (vector-set! newvec n (fn (vector-ref vec n)))
	       (loop newvec (- n 1)))))
  (loop (make-vector (vector-length vec)) (- (vector-length vec) 1)))
</pre></tt>

<p>
This is a lot more complicated!  It requires a helper procedure,
and an extra <i>index variable</i>, <tt>n</tt>, to keep track of the
element number within the vector.  By contrast, the list version
of <tt>map</tt> never actually knows how long its argument list is.

<p>
<b>&bull; Strengths and weaknesses</b>

<p>
Of course, if we wanted, we could write our own equivalent to <tt>cons</tt>
for vectors:

<p>
<tt>  <pre>;;;;;                         In file cs61as/lectures/vector.scm
(define (vector-cons value vec)   ;; DON'T DO THIS!
  (define (loop newvec n)         ;; Especially not on a test.
    (if (= n 0)
	(begin (vector-set! newvec n value)
	       newvec)
	(begin (vector-set! newvec n (vector-ref vec (- n 1)))
	       (loop newvec (- n 1)))))
  (loop (make-vector (+ (vector-length vec) 1)) (vector-length vec)))
</pre></tt>

<p>
If we wrote similar procedures <tt>vector-car</tt> and <tt>vector-cdr</tt>,
we could then write <tt>vector-map</tt> in a style exactly like <tt>map</tt>.
But this would be a bad idea, because our <tt>vector-cons</tt> requires
&Theta;(<em>n</em>) time to copy the elements from the old vector to the
new one.

<p>
<br />
<table>
<tr><td align="left"><b>operation</b></td><td align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>lists</b></td><td align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>vectors</b></td></tr>
<tr><td align="left"></td></tr>
<tr><td align="left"><em>n</em>th element</td><td align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<tt>list-ref</tt>, &Theta(<em>n</em>)</td><td align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<tt>vector-ref</tt>, &Theta(1)</td></tr>
<tr><td align="left">add new element</td><td align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<tt>cons</tt>, &Theta;(1)</td><td align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<tt>vector-cons</tt>, &Theta;(<em>n</em>)</td></tr></table>

<p>
<br />This is why there isn't one best way to represent sequences.
Lists are faster (and allow for cleaner code) at adding elements,
but vectors are faster at selecting arbitrary elements.

<p>
(Note, though, that if you want to select <i>all </i> the elements
of a sequence, one after another, then lists are just as fast as
arrays.  It's only when you want to jump around within the sequence
that arrays are faster.)

<p>

<p>
<b>&bull; Example: Shuffling</b>

<p>
Suppose we want to shuffle a deck of cards&mdash;we want to reorder
the cards randomly.  We'll look at three solutions to this problem.

<p>
First, here's a solution using functional programming with lists.
Because we aren't allowing mutation of pairs, this version does
a lot of recopying:

<p>
<tt>  <pre>;;;;;                         In file cs61as/lectures/vector.scm
(define (shuffle1 lst)
  (define (loop in out n)
    (if (= n 0)
	(cons (car in) (shuffle1 (append (cdr in) out)))
	(loop (cdr in) (cons (car in) out) (- n 1))))
  (if (null? lst)
      '()
      (loop lst '() (random (length lst)))))
</pre></tt>

<p>
This is a case in which functional programming has few virtues.
The code is hard to read, and it takes &Theta;(<em>n</em>&sup2;) time to
shuffle a list of length <em>n</em>.  (There are <em>n</em> recursive
calls to <tt>shuffle1</tt>, each of which calls the &Theta;(<em>n</em>)
primitives <tt>append</tt> and <tt>length</tt> as well as &Theta;(<em>n</em>)
calls to the helper function <tt>loop</tt>.)

<p>
We can improve things using list mutation.  Any list-based
solution will still be &Theta;(<em>n</em>&sup2;), because it takes
&Theta;(<em>n</em>)
time to find one element at a randomly chosen position, and we
have to do that <em>n</em> times.  But we can improve the constant
factor by avoiding the copying of pairs that <tt>append</tt> does
in the first version:

<p>
<tt>  <pre>;;;;;                         In file cs61as/lectures/vector.scm
(define (shuffle2! lst)
  (if (null? lst)
      '()
      (let ((index (random (length lst))))
	(let ((pair ((repeated cdr index) lst))
	      (temp (car lst)))
	  (set-car! lst (car pair))
	  (set-car! pair temp)
	  (shuffle2! (cdr lst))
	  lst))))
</pre></tt>

<p>
(Note:  This could be improved still further by calling <tt>length</tt>
only once, and using a helper procedure to subtract one from the
length in each recursive call.  But that would make the code more
complicated, so I'm not bothering.  You can take it as an exercise
if you're interested.)

<p>
Vectors allow a more dramatic speedup, because finding each
element takes &Theta;(1) instead of &Theta;(<em>n</em>):

<p>
<tt>  <pre>;;;;;                         In file cs61as/lectures/vector.scm
(define (shuffle3! vec)
  (define (loop n)
    (if (= n 0)
	vec
	(let ((index (random n))
	      (temp (vector-ref vec (- n 1))))
	  (vector-set! vec (- n 1) (vector-ref vec index))
	  (vector-set! vec index temp)
	  (loop (- n 1)))))
  (loop (vector-length vec)))
</pre></tt>

<p>
The total time for this version is &Theta;(<em>n</em>), because it makes
<em>n</em> recursive calls, each of which takes constant time.

<p>
<b>&bull; How it works</b>

<p>
One handwavy paragraph on why vectors have the performance they do:

<p>
A pair is two pointers attached to each other in a single block
of memory.  A vector is similar, but it's a block of <em>n</em> pointers
for an arbitrary (but fixed) number <em>n</em>.  Since a vector is one
contiguous block of memory, if you know the address of the
beginning of the block, you can just add <em>k</em> to find the address
of the <em>k</em>th element.  The downside is that in order to get all
the elements in a single block of memory, you have to allocate
the block all at once.

<p>
If you don't understand that, don't worry about it until 61B.

<p>
<b>Note:</b> Programming project 3 starts this week.</p>