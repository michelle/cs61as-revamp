<!-- Homework 3: Recursion and Iteration -->

<p> 
<b>Reading:</b> 
<a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2" target="_blank">Abelson &amp; Sussman, Section 1.2 through 1.2.4</a>
<p> 
</br>
<p> 
1.  Abelson &amp; Sussman, exercises <a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.16">1.16</a>, <a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.35" target="_blank">1.35</a>, <a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.37" target="_blank">1.37</a>, <a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.38" target="_blank">1.38</a>

</br></br><p> 
2.  A "perfect number" is defined as a number equal to the sum of all its
factors less than itself.  For example, the first perfect number is 6,
because its factors are 1, 2, 3, and 6, and 1+2+3=6.  The second perfect
number is 28, because 1+2+4+7+14=28.  What is the third perfect number?
Write a procedure <tt>(next-perf n)</tt> that tests numbers starting with <tt> 
n</tt> and continuing with <tt>n+1</tt>, <tt>n+2</tt>, etc.&nbsp;until a perfect number is
found.  Then you can evaluate <tt>(next-perf 29)</tt> to solve the problem.  Hint:
you'll need a <tt>sum-of-factors</tt> subprocedure.
 
</br></br><p> 
[Note: If you run this program when the system is heavily loaded, it may
take half an hour to compute the answer!  Try tracing helper procedures to
make sure your program is on track, or start by computing <tt>(next-perf 1)</tt> 
and see if you get 6.]
 
</br></br><p> 
3.  Explain the effect of interchanging the order in which the base cases in
the <tt>cc</tt> procedure on page 41 of Abelson and Sussman are checked.  That
is, describe completely the set of arguments for which the original <tt>cc</tt> 
procedure would return a different value or behave differently from a <tt> 
cc</tt> procedure coded as given below, and explain how the returned values
would differ.
 
<p> 
<tt>  <pre>(define (cc amount kinds-of-coins)
  (cond
    ((or (&lt; amount 0) (= kinds-of-coins 0)) 0)
    ((= amount 0) 1)
    (else ... ) ) )        ; as in the original version
</pre></tt> 
 
<p> 4.  Give an algebraic formula relating the values of the parameters <tt>b,
n, counter,</tt> and <tt>product</tt> of the <tt>expt</tt> and
<tt>exp-iter</tt> procedures given near the top of page 45 of Abelson and
Sussman.  (The kind of answer we're looking for is "the sum of <tt>b</tt>,
<tt>n</tt>, and <tt>counter</tt> times <tt>product</tt> is always equal to
37.")
 
</br></br> 

<p> 
<br /><hr /> 
Unix feature of the week: <tt>mkdir</tt>, <tt>cd</tt>, <tt>pwd</tt>, <tt>ls</tt> 
<p> 
Emacs feature of the week: <tt>C-M-f</tt>, <tt>C-M-b</tt>, <tt>C-M-n</tt>, <tt>C-M-p</tt> (move around Scheme code)
<p></p>