<!-- Lab 3: Iteration and Recursion -->

<p> 
This lab exercise concerns the change counting program on pages 40-41
of Abelson and Sussman.
 
<p> 
1.  Identify two ways to change the program to <i>reverse</i> the order
in which coins are tried, that is, to change the program so that
pennies are tried first, then nickels, then dimes, and so on.
 
<p> 
<br />2.  Abelson and Sussman claim that this change would not affect
the <i>correctness</i> of the computation.
However, it does affect the <i>efficiency</i> of the computation.
Implement one of the ways you devised in exercise 1
for reversing the order in which coins are tried,
and determine the extent to which the number of calls to cc
is affected by the revision.
Verify your answer on the computer,
and provide an explanation.
Hint: limit yourself to
nickels and pennies, and compare the trees resulting from <tt>(cc 5 2)</tt> 
for each order.
 
<p> 
<br />3.  Modify the <tt>cc</tt> procedure so that its <tt>kinds-of-coins</tt> 
parameter, instead of being an integer, is a <i>sentence</i> 
that contains the values of the coins to be used in making change.
The coins should be tried in the sequence they appear in the sentence.
For the <tt>count-change</tt> procedure to work the same in the revised
program as in the original, it should call <tt>cc</tt> as follows:
 
<p> 
<tt>  <pre>(define (count-change amount)
  (cc amount '(50 25 10 5 1)) )
</pre></tt> 
 
<p> 
<br />4.  Many Scheme procedures require a certain type of argument.  For
example, the arithmetic procedures only work if given numeric arguments.
If given a non-number, an error results.
 
<p> 
Suppose we want to write <i>safe</i> versions of procedures, that can
check if the argument is okay, and either call the underlying procedure
or return <tt>#f</tt> for a bad argument instead of giving an error.
(We'll restrict our attention to procedures that take a single argument.)
 
<p> 
<tt>  <pre>&#62; (sqrt 'hello)
ERROR: magnitude: Wrong type in arg1 hello
&#62; (type-check sqrt number? 'hello)
#f
&#62; (type-check sqrt number? 4)
2
</pre></tt> 
 
<p> 
Write <tt>type-check</tt>.  Its arguments are a function, a type-checking
predicate that returns <tt>#t</tt> if and only if the datum is a legal
argument to the function, and the datum.
 
<p> 
<br />5.  We really don't want to have to use <tt>type-check</tt> explicitly
every time.  Instead, we'd like to be able to use a <tt>safe-sqrt</tt> 
procedure:
 
<p> 
<tt>  <pre>&#62; (safe-sqrt 'hello)
#f
&#62; (safe-sqrt 4)
2
</pre></tt> 
 
<p> 
Don't write <tt>safe-sqrt</tt>!  Instead, write a procedure <tt>make-safe</tt> 
that you can use this way:
 
<p> 
<tt>  <pre>&#62; (define safe-sqrt (make-safe sqrt number?))
</pre></tt> 
 
<p> 
It should take two arguments, a function and a type-checking predicate,
and return a new function that returns <tt>#f</tt> if its argument doesn't
satisfy the predicate.</p>