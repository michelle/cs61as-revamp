<!-- Homework 2: Higher-Order Procedures -->

<p> 
<b>Reading:</b> 
<a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_sec_1.3" target="_blank">Abelson &amp; Sussman, Section 1.3</a>
<p> 
<b>Note</b> that we are skipping 1.2; we'll get to it later.
Because of this, never mind for now the stuff about iterative versus
recursive processes in 1.3 and in the exercises from that section.
 
<br/>
<br/>
<p> 
Don't panic if you have trouble with the <a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_sec_1.3.3" target="_blank">half-interval example</a> on pp. 67-68; you can just skip it.  Try to read and understand everything else.
 
<p> 
<br/>
<b>Homework:</b> 
<p> 
1.  Abelson &amp; Sussman, exercises <a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.31" target="_blank">1.31(a)</a>, <a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.32" target="_blank">1.32(a)</a>, <a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.33">1.33</a>, <a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.40" target="_blank">1.40</a>, <a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.41" target="_blank">1.41</a>, <a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.43" target="_blank">1.43</a>, <a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.46" target="_blank">1.46</a>
<p> 
(Pay attention to footnote 51; you'll need to know the ideas in
these exercises later in the semester.)
 
<p> 
 
<p> 
2.  Last week you wrote procedures <tt>squares</tt>, that squared each number
in its argument sentence, and saw <tt>pigl-sent</tt>, that <tt>pigl</tt>ed each word
in its argument sentence.  Generalize this pattern to create a higher-order
procedure called <tt>every</tt> that applies an <i>arbitrary</i> procedure,
given as an argument,
to each word of an argument sentence.
This procedure is used as follows:
 
<p> 
<tt>  <pre>&#62; (every square '(1 2 3 4))
(1 4 9 16)
&#62; (every first '(nowhere man))
(n m)
</pre></tt> 
 
<p> 
3.  Our Scheme library provides versions of the <tt>every</tt> function from
the last exercise and the <tt>keep</tt> function shown in lecture.  Get
familiar with these by trying examples such as the following:
 
<p> 
<tt>  <pre>(every (lambda (letter) (word letter letter)) 'purple)
(every (lambda (number) (if (even? number) (word number number) number))
       '(781 5 76 909 24))
(keep even? '(781 5 76 909 24))
(keep (lambda (letter) (member? letter 'aeiou)) 'bookkeeper)
(keep (lambda (letter) (member? letter 'aeiou)) 'syzygy)
(keep (lambda (letter) (member? letter 'aeiou)) '(purple syzygy))
(keep (lambda (wd) (member? 'e wd)) '(purple syzygy))
</pre></tt> 
 
<p> 

<br /><hr /> 
Unix feature of the week: <tt>pine</tt>, <tt>mail</tt>, <tt>firefox</tt> 
<p> 
Emacs feature of the week: <tt>M-x info</tt>, <tt>C-x u</tt> (undo)
<p></p>