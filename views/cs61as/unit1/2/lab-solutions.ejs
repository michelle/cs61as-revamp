<pre>
CS 61A		Week 2		Lab Solutions

FIRST LAB:

Problem 1:

f	Any definition at all will do:
		(define f 'hello)		f is  hello
		(define f (+ 2 3))		f is  5
		(define (f x) (+ x 7))		f is  #<procedure f>

(f)	This expression says to invoke f as a procedure with no
	arguments.  For that to work, we must DEFINE f as a procedure
	with no arguments:
		(define (f) 'hello)		(f) is  hello
		(define (f) (+ 2 3))		(f) is  5
	Each of these is shorthand for an explicit use of lambda:
		(define f (lambda () 'hello))
		(define f (lambda () (+ 2 3))

(f 3)	This expression says to invoke f as a procedure with an
	argument, so we have to define it that way:
		(define (f x) (+ x 5))		(f 3) is  8
		(define (f x) 'hello)		(f 3) is  hello
		(define (f x) (word x x))	(f 3) is  33
	Again, these definitions are shorthand for lambda expressions:
		(define f (lambda (x) (+ x 5)))
		(define f (lambda (x) 'hello))
		(define f (lambda (x) (word x x)))

((f))	This expression says, first of all, to compute the subexpression
	(f), which invokes f as a procedure with no arguments.  Then, the
	result of that invocation must be another procedure, which is
	also invoked with no arguments.  So, we have to define f as a
	procedure that returns a procedure:
		(define (f) (lambda () 'hello))	     ((f)) is  hello
		(define (f) (lambda () (+ 2 3)))     ((f)) is  5
	Or without the shorthand,
		(define f (lambda () (lambda () 'hello)))
		(define f (lambda () (lambda () (+ 2 3))))
	Alternatively, we can let the procedure f return some procedure
	we already know about, supposing that that procedure can be
	invoked with no arguments:
		(define (f) +)		             ((f)) is  0
		(define f (lambda () +))
	As a super tricky solution, for hotshots only, try this:
		(define (f) f)			     ((f)) is  #<procedure f>
						     (((f))) is.... ?

(((f)) 3)  Sheesh!  F has to be a function.  When we invoke it with no
	   arguments, we should get another function (let's call it G).
	   When we invoke G with no arguments, we get a third function
	   (call it H).  We have to be able to call H with the argument 3
	   and get some value.  We could spell this out as a sequence of
	   definitions like this:
		(define (h x) (* x x))
		(define (g) h)
		(define (f) g)			(((f)) 3) is  9
	   Alternatively, we can do this all in one:
		(define (f) (lambda () (lambda (x) (* x x))))
	   or without the abbreviation:
		(define f (lambda () (lambda () (lambda (x) (* x x)))))

By the way, you haven't yet learned the notation for functions that accept
any number of arguments, but if you did know it, you could use
		(define (f . args) f)
as the answer to *all* of these problems!


Problem 2:

This is a "do something to every word of a sentence" problem, like
PL-SENT or SQUARES, but with two extra arguments.  But it
also has a decision to make for each word (is this word equal to the
one we're replacing), like the filtering procedures EVENS, ENDS-E, etc.,
so it takes the form of a three-branch COND:

(define (substitute sent old new)
  (cond ((empty? sent) '())
	((equal? (first sent) old)
	 (se new (substitute (butfirst sent) old new)))
	(else (se (first sent) (substitute (butfirst sent) old new)))))


Problem 3:

Of course you could just try this on the computer, but you should understand
the results.

(t 1+) means that we should substitute the actual argument, which is the
function named 1+, for t's formal parameter, which is f, in t's body,
which is (lambda (x) (f (f (f x)))).  The result of the substitution is

		(lambda (x) (1+ (1+ (1+ x))))

Evaluating this produces a function that adds three to its argument, so
((t 1+) 0) is 3.

(t (t 1+)) means to substitute (t 1+) for f in t's body.  If we actually
substituted the lambda expression above for f three times, we'd get a
horrible mess:

		(lambda (x) ((lambda (x) (1+ (1+ (1+ x))))
			     ((lambda (x) (1+ (1+ (1+ x))))
			      ((lambda (x) (1+ (1+ (1+ x))))
			       0))))

but what's important is the function, not the expression that produced
the function, so we can just mentally give (t 1+) the name 3+ and then
the result we want is

		(lambda (x) (3+ (3+ (3+ x))))

and if we apply that function to 0 we'll get 9.

For the final piece of the problem, we have to begin by computing (t t), which
is what we get when we substitute t for f in t's body:

		(lambda (x) (t (t (t x))))

Don't be confused!  Even though this lambda expression has x as its formal
parameter, not f, the argument has to be a function, because we're going to
end up invoking t on that argument.  In other words, (t t) returns as its
value a function that takes a function as argument.

Now, ((t t) 1+) means to apply the function just above to the argument 1+
which, in turn, means to substitute 1+ for x in the body:

		(t (t (t 1+)))

Well, this isn't so hard; we've really already done it.  (t 1+) turned
out to be 3+, and (t (t 1+)) turned out to be 9+.  By the same reasoning,
this will turn out to be 27+ (that is, 9+ three times), so when we apply
this to 0 we get 27.

Problem 4:

This is actually the same as problem 2!  The function S is identical to
1+, so the answers have to be the same.  It's more work if you actually
substitute values into the body of s, but you can avoid all that if you
realize that these problems are identical in meaning.

Problem 5:

If (g) is a legal expression, then g takes ZERO arguments.
If ((g) 1) has the value 3, then (g) has a PROCEDURE as its value.
(If we'd asked for more than one word, you could say "a procedure
of one numeric argument that returns a number" or something.)


Problem 6:

(define (make-tester who)
  (lambda (x) (equal? x who)))

</pre>