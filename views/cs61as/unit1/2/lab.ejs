<!-- Lab 2: Higher Order Procedures -->

<p>
This lab introduces a new special form, <tt>lambda</tt>.

<p>
1.  Type each of the following into Scheme, and note the results.  See when
you can <i>predict</i> the results before letting Scheme do the computation.

<p>
<tt>  <pre>(lambda (x) (+ x 3))

((lambda (x) (+ x 3)<!--hbox--> 7)
</pre></tt>

<p>
You can think of <tt>lambda</tt> as meaning "the function of...," e.g.,
"the function of <tt>x</tt> that returns <tt>(+ x 3)</tt>.

<p>
<tt>  <pre>(define (make-adder num)
  (lambda (x) (+ x num)))

((make-adder 3)<!--hbox--> 7)

(define plus3 (make-adder 3))

(plus3 7)

(define (square x) (* x x))

(square 5)

(define sq (lambda (x) (* x x))<!--hbox-->)

(sq 5)

(define (try f) (f 3 5))

(try +)

(try word)
</pre></tt>

<p>

2.  Write a procedure <tt>substitute</tt> that takes three arguments:&nbsp;a
sentence, an <i>old</i> word, and a <i>new</i> word.  It should return
a copy of the sentence, but with every occurrence of the old word
replaced by the new word.  For example:

<p>
<tt>  <pre>&#62; (substitute '(she loves you yeah yeah yeah) 'yeah 'maybe)
(she loves you maybe maybe maybe)
</pre></tt>

<p>
<br />3.  Consider a Scheme function <tt>g</tt> for which the expression

<p>
<tt>  <pre>((g) 1)
</pre></tt>

<p>
 returns the value 3 when evaluated.  Determine how many
arguments <tt>g</tt> has.  In one word, also describe as best you can
the <i>type</i> of value returned by <tt>g</tt>.

<p>
<br />4.  For each of the following expressions, what must <tt>f</tt> be in order for
the evaluation of the expression to succeed, without causing an error?  For
each expression, give a definition of <tt>f</tt> such that evaluating the
expression will not cause an error, and say what the expression's value will
be, given your definition.

<p>
<tt>  <pre>f
(f)
(f 3)
((f))
(((f)) 3)
</pre></tt>

<p>
<br />5.  Find the values of the expressions

<p>
<tt>  <pre>
((t 1+) 0)
((t (t 1+)) 0)
(((t t) 1+) 0)
</pre></tt>

<p>
where <tt>1+</tt> is a primitive procedure that adds 1 to its argument, and
<tt>t</tt> is defined as follows:

<p>
<tt>  <pre>(define (t f)
  (lambda (x) (f (f (f x)))) )
</pre></tt>

<p>
Work this out yourself before you try it on the computer!

<p>
<br />6.  Find the values of the expressions

<p>
<tt>  <pre>
((t s) 0)
((t (t s)) 0)
(((t t) s) 0)
</pre></tt>

<p>
where <tt>t</tt> is defined as in question 2 above, and <tt>s</tt> is defined as
follows:

<p>
<tt>  <pre>(define (s x)
  (+ 1 x))
</pre></tt>

<p>
7. Write and test the <tt>make-tester</tt> procedure.
Given a word <tt>w</tt> as argument, <tt>make-tester</tt> returns a procedure
of one argument <tt>x</tt> that returns true if <tt>x</tt> is equal to <tt>w</tt>
and false otherwise. Examples:

<p>
<tt>  <pre>&#62; ((make-tester 'hal) 'hal)
#t
&#62; ((make-tester 'hal) 'cs61a)
#f
&#62; (define sicp-author-and-astronomer? (make-tester 'gerry))
&#62; (sicp-author-and-astronomer? 'hal)
#f
&#62; (sicp-author-and-astronomer? 'gerry)
#t
</pre></tt></p>