<!-- Lecture Notes 1: Functional Programming -->

<p>
<b>Reading:</b>
<a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1" target="_blank">Abelson &amp; Sussman, Section 1.1 (pages 1-31)</a>
</br><br/>
<p>
Welcome to CS 61A, the world's best computer science course, because
we use the world's best CS book as the textbook.  The only thing
wrong with this course is that all the rest of the CS courses for
the rest of your life will seem a little disappointing (and repetitive).
<br/><br/>
<p>
Course overview comes next lecture; now we're going to jump right in
so you can get started exploring on your own in the lab.

<p>
In 61A we program in Scheme, which is an <i>interactive </i> language.
That means that instead of writing a great big program and then cranking it
through all at once, you can type in a single expression and find out its
value.  For example:

<p>
<table border="0"><tr><td></td><td><table border="0"><tr><td>
<table>
<tr><td align="left"><tt>3</tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td align="left">self-evaluating</td></tr>
<tr><td align="left"><tt>(+ 2 3)</tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td align="left">function notation</td></tr>
<tr><td align="left"><tt>(sqrt 16)</tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td align="left">names don't have to be punctuation</td></tr>
<tr><td align="left"><tt>(+ (* 3 4) 5)</tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td align="left">composition of functions</td></tr>
<tr><td colspan="2" align="left">&nbsp; </td></tr>

<tr><td align="left"><tt>+</tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td align="left">functions are things in themselves</td></tr>
<tr><td align="left"><tt>'+</tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td align="left">quoting</td></tr>
<tr><td align="left"><tt>'hello</tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td align="left">can quote any word</td></tr>
<tr><td align="left"><tt>'(+ 2 3)</tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td align="left">can quote any expression</td></tr>
<tr><td align="left"><tt>'(good morning)</tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td align="left">even non-expression sentences</td></tr>
<tr><td colspan="2" align="left">&nbsp;</td></tr>

<tr><td align="left"><tt>(first 274)</tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td align="left">functions don't have to be arithmetic</td></tr>
<tr><td align="left"><tt>(butfirst 274)</tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td align="left">(abbreviation <tt>bf</tt>)</td></tr>
<tr><td align="left"><tt>(first 'hello)</tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td align="left">works for non-numbers</td></tr>
<tr><td align="left"><tt>(first hello)</tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td align="left">reminder about quoting</td></tr>
<tr><td align="left"><tt>(first (bf 'hello))</tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td align="left">composition of non-numeric functions</td></tr>
<tr><td align="left"><tt>(+ (first 23) (last 45))</tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td align="left">combining numeric and non-numeric</td></tr>
<tr><td colspan="2" align="left">&nbsp;</td></tr>

<tr><td align="left"><tt>(define pi 3.14159)</tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td align="left">special form</td></tr>
<tr><td align="left"><tt>pi</tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td align="left">value of a symbol</td></tr>
<tr><td align="left"><tt>'pi</tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td align="left">contrast with quoted symbol</td></tr>
<tr><td align="left"><tt>(+ pi 7)</tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td align="left">symbols work in larger expressions</td></tr>
<tr><td align="left"><tt>(* pi pi)</tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td colspan="2" align="left">&nbsp;</td></tr>

<tr><td align="left"><tt>(define (square x)</tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td align="left"><tt>&nbsp;&nbsp;(* x x))</tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td align="left">defining a function</td></tr>
<tr><td align="left"><tt>(square 5)</tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td align="left">invoking the function</td></tr>
<tr><td align="left"><tt>(square (+ 2 3))</tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td align="left">composition with defined functions</td></tr></table>

</td></tr></table><!--vbox-->
</td><td></td></tr></table><!--hboxt-->

<P>Terminology: the <i>formal parameter </i> is the name of the
argument (<tt>x</tt>); the <i>actual argument expression </i> is
the expression used in the invocation (<tt>(+&nbsp;2&nbsp;3)</tt>); the
<i>actual argument value </i> is the value of the argument in
the invocation (5).  The argument's name comes from the function's
definition; the argument's value comes from the invocation.

<p>

<p>
Examples:

<p>
<tt>  <pre>(define (plural wd)
  (word wd 's))

</pre></tt>

<p>
This simple <tt>plural</tt> works for lots of words (book, computer,
elephant) but not for words that end in <tt>y</tt> (fly, spy).  So we
improve it:

<p>
<tt>  <pre>;;;;;                        In file cs61as/lectures/1.1/plural.scm
(define (plural wd)
  (if (equal? (last wd) 'y)
      (word (bl wd) 'ies)
      (word wd 's)))

</pre></tt>

<p>
<tt>If</tt> is a special form that only evaluates one of the alternatives.

<p>
Pig Latin:  Move initial consonants to the end of the word and append
"ay"; SCHEME becomes EMESCHAY.

<p>
<tt>  <pre>;;;;;                        In file cs61as/lectures/1.1/pigl.scm
(define (pigl wd)
  (if (pl-done? wd)
      (word wd 'ay)
      (pigl (word (bf wd) (first wd)))))

(define (pl-done? wd)
  (vowel? (first wd)))

(define (vowel? letter)
  (member? letter '(a e i o u)))

</pre></tt>

<p>
<tt>Pigl</tt> demonstrates <i>recursion</i>&mdash;a function that invokes
itself.  If this is new to you, you should do lesson 0.3 first.

<p>
Another example:  Remember how to play Buzz?  You go around the circle
counting, but if your number is divisible by 7 or has a digit 7 you
have to say "buzz" instead:

<p>
<tt>  <pre>;;;;;                        In file cs61as/lectures/1.1/buzz.scm
(define (buzz n)
  (cond ((equal? (remainder n 7) 0) 'buzz)
        ((member? 7 n) 'buzz)
        (else n)))

</pre></tt>

<p>
This introduces the <tt>cond</tt> special form for multi-way choices.

<p>
<tt>Cond</tt> is the big exception to the rule about the meaning of
parentheses; the clauses aren't invocations.

<br/><br/>

<p>

<p>
<b>Course overview:</b>

<p>
Computer science isn't about computers (that's electrical engineering)
and it isn't primarily a science (we invent things more than we
discover them).

<p>
CS is partly a form of engineering (concerned with building reliable,
efficient mechanisms, but in software instead of metal) and partly an
art form (using programming as a medium for creative expression).

<p>
Programming is really easy, as long as you're solving small problems.
Any kid in middle school can write programs in BASIC, and not just
exercises, either; kids do quite interesting and useful things with
computers.  But BASIC doesn't scale up; once the problem is so complicated
that you can't keep it all in your head at once, you need help, in the
form of more powerful ways of thinking about programming.  (But in this
course we mostly use small examples, because we'd never get finished
otherwise, so you have to imagine how you think each technique would
work out in a larger case.)

<p>
We deal with four big programming styles/approaches/paradigms:

<p>

<ul>
<li>Functional programming (2 units)
<li>Object-oriented programming (1 unit)
<li>Client-server programming (1 lesson)
<li>Logic programming (1 lesson)
</ul>

<P>The big idea of the course is <i>abstraction </i>:&nbsp;inventing languages that
let us talk more nearly in a problem's own terms and less in terms of the
computer's mechanisms or capabilities.  There is a hierarchy of abstraction:

<p>
<tt>  <pre>Application programs
High-level language (Scheme)
Low-level language (C)
Machine language
Architecture (registers, memory, arithmetic unit, etc)
circuit elements (gates)
transistors
solid-state physics
quantum mechanics

</pre></tt>

<p>
In 61C we look at lower levels; all are important but we want to start
at the highest level to get you thinking right.

<br/><br/>

<p>
<b>Style of work:</b>  Cooperative learning.  No grading curve, so no need
to compete.  Homework is to learn from; only tests are to test you.  Don't
cheat; ask for help instead.  (This is the <i>first </i> CS course; if
you're tempted to cheat now, how are you planning to get through the harder
ones?)

<br/><br/>
<p>
<b>Functions.</b>

<p>
<font face="symbol"></font
>&bull; A function can have any number of arguments, including zero,
but must have exactly one return value.  (Suppose you want two?  You
combine them into one, e.g., in a sentence.)  It's not a function unless
you always get the same answer for the same arguments.

<p>
<font face="symbol"></font
>&bull; Why does that matter?  If each little computation is independent
of the past history of the overall computation, then we can <i>reorder </i>
the little computations.  In particular, this helps cope with parallel
processors.

<p>
<font face="symbol"></font
>&bull; The function definition provides a formal parameter (a name),
and the function invocation provides an actual argument (a value).  These
fit together like pieces of a jigsaw puzzle.  <i>Don't write a "function"
that only works for one particular argument value!</i>

<p>
<font face="symbol"></font
>&bull; Instead of a sequence of events, we have composition of functions,
like f(g(x)) in high school algebra.  We can represent this visually with
function machines and plumbing diagrams.

<p>
<br /><br /><b>Recursion:</b>

<p>
<tt>  <pre>;;;;;                        In file cs61as/lectures/1.1/argue.scm
&#62; (argue '(i like spinach))
(i hate spinach)
&#62; (argue '(broccoli is awful))
(broccoli is great)

(define (argue s)
  (if (empty? s)
      '()
      (se (opposite (first s))
          (argue (bf s)))))

(define (opposite w)
  (cond ((equal? w 'like) 'hate)
        ((equal? w 'hate) 'like)
        ((equal? w 'wonderful) 'terrible)
        ((equal? w 'terrible) 'wonderful)
        ((equal? w 'great) 'awful)
        ((equal? w 'awful) 'great)
        ((equal? w 'terrific) 'yucky)
        ((equal? w 'yucky) 'terrific)
        (else w) ))

</pre></tt>

<p>
This computes a function (the <tt>opposite</tt> function) of each word in a
sentence.  It works by dividing the problem for the whole sentence into
two subproblems:&nbsp;an easy subproblem for the first word of the sentence,
and another subproblem for the rest of the sentence.  This second subproblem
is just like the original problem, but for a smaller sentence.

<p>
We can take <tt>pigl</tt> from last lecture and use it to translate a whole
sentence into Pig Latin:

<p>
<tt>  <pre>(define (pigl-sent s)
  (if (empty? s)
      '()
      (se (pigl (first s))
          (pigl-sent (bf s)))))

</pre></tt>

<p>
The structure of <tt>pigl-sent</tt> is a lot like that of <tt>argue</tt>.  This
common pattern is called <i>mapping </i> a function over a sentence.

<p>
Not all recursion follows this pattern.  Each element of Pascal's triangle
is the sum of the two numbers above it:

<p>
<tt>  <pre>(define (pascal row col)
  (cond ((= col 0) 1)
        ((= col row) 1)
        (else (+ (pascal (- row 1) (- col 1))
                 (pascal (- row 1) col) ))))

</pre></tt>

<p>

<p>
<b>Normal vs. applicative order.</b>

<p>
To illustrate this point we use a modified Scheme evaluator that lets
us show the process of applicative or normal order evaluation.  We
define functions using <tt>def</tt> instead of <tt>define</tt>.  Then, we
can evaluate expressions using <tt>(applic&nbsp;(...))</tt> for applicative
order or <tt>(normal&nbsp;(...))</tt> for normal order.  (Never mind how this
modified evaluator itself works!  Just take it on faith and concentrate
on the results that it shows you.)

<p>
In the printed results, something like

<p>
<tt>  <pre>(* 2 3) ==&#62; 6

</pre></tt>

<p>
indicates the ultimate invocation of a primitive function.  But

<p>
<tt>  <pre>(f 5 9) --&#62;
(+ (g 5) 9)

</pre></tt>

<p>
indicates the substitution of actual arguments into the body of
a function defined with <tt>def</tt>.  (Of course, whether actual argument
values or actual argument expressions are substituted depends on
whether you used <tt>applic</tt> or <tt>normal</tt>, respectively.)

<p>
<tt>  <pre>&#62; (load "lectures/1.1/order.scm")
&#62; (def (f a b) (+ (g a) b))     ; define a function
f
&#62; (def (g x) (* 3 x))           ; another one
g
&#62; (applic (f (+ 2 3) (- 15 6))) ; show applicative-order evaluation

(f (+ 2 3) (- 15 6))
   (+ 2 3) ==&#62; 5
   (- 15 6) ==&#62; 9
(f 5 9) --&#62; 
(+ (g 5) 9)
   (g 5) --&#62; 
   (* 3 5) ==&#62; 15
(+ 15 9) ==&#62; 24
24
&#62; (normal (f (+ 2 3) (- 15 6))) ; show normal-order evaluation

(f (+ 2 3) (- 15 6)) --&#62; 
(+ (g (+ 2 3)) (- 15 6))
   (g (+ 2 3)) --&#62; 
   (* 3 (+ 2 3))
      (+ 2 3) ==&#62; 5
   (* 3 5) ==&#62; 15
   (- 15 6) ==&#62; 9
(+ 15 9) ==&#62; 24                 ; Same result, different process.
24

</pre></tt>

<p>
<tt>  <pre>&#62; (def (zero x) (- x x))        ; This function should always return 0.
zero
&#62; (applic (zero (random 10)))

(zero (random 10))
   (random 10) ==&#62; 5
(zero 5) --&#62; 
(- 5 5) ==&#62; 0
0                               ; Applicative order does return 0.

&#62; (normal (zero (random 10)))

(zero (random 10)) --&#62; 
(- (random 10) (random 10))
   (random 10) ==&#62; 4
   (random 10) ==&#62; 8
(- 4 8) ==&#62; -4
-4                              ; Normal order doesn't.

</pre></tt>

<p>
The rule is that if you're doing functional programming, you get the
same answer regardless of order of evaluation.  Why doesn't this hold
for <tt>(zero (random 10))</tt>?  Because it's not a function!  Why not?

<p>
Efficiency:  Try computing

<p>
<tt>  <pre>(square (square (+ 2 3)))

</pre></tt>

<p>
in normal and applicative order.  Applicative order is more efficient
because it only adds 2 to 3 once, not four times.  (But later in the
semester we'll see that sometimes normal order is more efficient.)

<br/><br/>
<p>
<b>Note that the reading for next week is section 1.3, skipping 1.2
for the time being.</b></p>