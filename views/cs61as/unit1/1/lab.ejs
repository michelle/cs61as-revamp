<!-- Lab 1: Functional Programming -->


<ol>

<li> Start the Emacs editor, either by typing <tt>emacs</tt> in your main
window or by selecting it from the alt-middle mouse menu. (Your TA will show
you how to do this.) From the Help menu, select the Emacs tutorial. You need
not complete the entire tutorial at the first session, but you should do so
eventually.</li>

<p>

<li>

Start Scheme, either by typing <tt>stk</tt> in your main window or by typing
meta-S in your Emacs window. Type each of the following expressions into
Scheme, ending the line with the Enter (carriage return) key. Think about the
results! Try to understand how Scheme interprets what you type. <p>

<tt><div id="scheme" style="width:100%; display: table;">

  <ul>

    <div style="float:left; width:50%;">

      (first 'hello)<p> 

      (+ 2 3)<p> 

      (first hello)<p> 

      (+ 5 6 7 8)<p> 

      (first (bf 'hello))<p> 

      (+)<p> 

      (+ (first 23) (last 45))<p> 

      (sqrt 16)<p> 

      (define pi 3.14159)<p> 

      (+ (* 3 4) 5)<p> 

      pi<p> 

      +<p> 

    </div>

    <div style="float: left; width:50%;">

      'pi<p> 

      '+<p> 

      (+ pi 7)<p> 

      'hello<p> 

      (* pi pi)<p> 

      '(+ 2 3)<p> 

      (define (square x) (* x x))<p> 

      '(good morning)<p> 

      (square 5)<p> 

      (first 274)<p> 

      (square (+ 2 3))<p> 

      (butfirst 274)<p> 

    </div>

  </ul>

  </div>
</tt>
</li>

<p>

<li>

Use Emacs to create a file called <tt>pigl.scm</tt> in your directory
containing the Pig Latin program shown below:<p>

<tt>  <pre>(define (pigl wd)
  (if (pl-done? wd)
      (word wd 'ay)
      (pigl (word (bf wd) (first wd)))))

(define (pl-done? wd)
  (vowel? (first wd)))
 
(define (vowel? letter)
  (member? letter '(a e i o u)))
</pre></tt> 
 <p><p>

Make sure you are editing a file whose name ends in <tt>.scm</tt>, so that
Emacs will know to indent your code correctly!<p>

</li>

<li>

Now run Scheme. You are going to create a transcript of a session using the file you just created:<br> 

<tt>  <pre>(transcript-on "lab1")       ; This starts the transcript file.
(load "pigl.scm")            ; This reads in the file you created earlier.
(pigl 'scheme)               ; Try out your program.
                             ; Feel free to try more test cases here!
(trace pigl)                 ; This is a debugging aid. Watch what happens
(pigl 'scheme)               ; when you run a traced procedure.
(transcript-off)
(exit)
</pre></tt> 
 
<p><p>

</li>

<li>

Use <tt>lpr</tt> to print your transcript.<br> 

</li>

<li>
  <p>
  Predict what Scheme will print in response to each of these expressions.
  Then try it and make sure your answer was correct, or if not, that you
  understand why!<br>

<tt>  <pre>(define a 3)
(define b (+ a 1))
(+ a b (* a b))
(= a b)
(if (and (&#62; b a) (&lt; b (* a b)))
    b
    a)
(cond ((= a 4) 6)
      ((= b 4) (+ 6 7 a))
      (else 25))
(+ 2 (if (&#62; b a) b a))
(* (cond ((&#62; a b) a)
         ((&lt; a b) b)
         (else -1))
   (+ a 1))
((if (&lt; a b) + -) a b)
 </pre></tt>
</p>
</li>

<li>  In the shell, type the command
 
<p>
<tt>  <pre>cp &#126;cs61as/lib/plural.scm .
</pre></tt> 
 
<p>
 (Note the period at the end of the line!)  This will copy
a file from the class library to your own directory.  Then, using
Emacs to edit the file, modify the procedure so that it correctly
handles cases like <tt>(plural&nbsp;'boy)</tt>.
 
<p>
<li>  Define a procedure that takes three numbers as
arguments and returns the sum of the squares of the two larger numbers.
 
<p>
<li>  Write a procedure <tt>dupls-removed</tt> that, given
a sentence as input, returns the result of removing duplicate words
from the sentence.  It should work this way:
<p> 
<tt>  <pre>&#62; (dupls-removed '(a b c a e d e b))
(c a d e b)
&#62; (dupls-removed '(a b c))
(a b c)
&#62; (dupls-removed '(a a a a b a a))
(b a)
</pre></tt></p>