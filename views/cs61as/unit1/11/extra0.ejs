<!-- Extra for Experts 11: Streams -->

<p>
1.  Do exercises 3.59&ndash;3.62.

<p>
2.  Consider this procedure:

<p>
<tt>  <pre>(define (hanoi-stream n)
  (if (= n 0)
      the-empty-stream
      (stream-append (hanoi-stream (- n 1))
		     (cons-stream n (hanoi-stream (- n 1))))))
</pre></tt>

<p>
It generates finite streams; here are the first few values:

<p>
<tt>  <pre>(hanoi-stream 1)    (1)
(hanoi-stream 2)    (1 2 1)
(hanoi-stream 3)    (1 2 1 3 1 2 1)
(hanoi-stream 4)    (1 2 1 3 1 2 1 4 1 2 1 3 1 2 1)
</pre></tt>

<p>
Notice that each of these starts with the same values as the one above it,
followed by some more values.  There is no reason why this pattern can't be
continued to generate an infinite stream whose first 2<sup>n</sup> <font face="symbol">-</font
> 1 elements are
<tt>(hanoi-stream&nbsp;n)</tt>.  Generate this stream.