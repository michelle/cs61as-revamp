<!-- Introduction 4: Data Abstraction and Sequences -->

<p>
In section&nbsp;<a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.8">1.1.8</a>, we noted
that a procedure used as an element in creating a more complex
procedure could be regarded not only as a collection of particular
operations but also as a procedural abstraction.  That is, the details
of how the procedure was implemented could be suppressed, and the
particular procedure itself could be replaced by any other procedure
with the same overall behavior.  In other words, we could make an
abstraction that would separate the way the procedure would be used
from the details of how the procedure would be implemented in terms of
more primitive procedures.  The analogous notion for compound data is
called <a name="%_idx_1280"></a><em>data abstraction</em>.  Data abstraction is a methodology that
enables us to isolate how a compound data object is used from the
details of how it is constructed from more primitive data objects.<p> 
 
The basic idea of data abstraction is to structure the programs that
are to use compound data objects so that they operate on <a name="%_idx_1282"></a><a name="%_idx_1284"></a>``abstract
data.'' That is, our programs should use data in such a way as to make
no assumptions about the data that are not strictly necessary for
performing the task at hand.  At the same time, a <a name="%_idx_1286"></a><a name="%_idx_1288"></a>``concrete'' data
representation is defined independent of the programs that use
the data.  The interface between these two parts of our system will be
a set of procedures, called <a name="%_idx_1290"></a><em>selectors</em> and <a name="%_idx_1292"></a><em>constructors</em>,
that implement the abstract data in terms of the concrete
representation.  To illustrate this technique, we will consider how to
design a set of procedures for manipulating rational numbers.<p></p>