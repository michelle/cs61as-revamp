<!-- Homework 12: Metacircular Evaluator -->

<p>
<b>Midterm Wednesday , 7-9pm.</b>

<p>
<b>Reading:</b>

<p>
Abelson &amp; Sussman, 4.1.1-6
<p>
(metacircular evaluator: <tt>&#126;cs61as/lib/mceval.scm</tt>)

<p>
<b>Homework:</b>
<p>
Some students have complained that this week's homework is very
time-consuming.  Accordingly, with some reluctance, I've marked a few
exercises as optional; these are the ones to leave out if you're really
pressed for time.  But it's much better if you do all of them!  The
optional ones have <tt>*</tt> next to them.

<p>
1.  A&amp;S exercises 4.3, 4.6, 4.7<tt>*</tt>, 4.10<tt>*</tt>, 4.11<tt>*</tt>,
4.13, 4.14, 4.15

<p>
2<tt>*</tt>. Modify the metacircular evaluator to allow <i>type-checking</i> of
arguments to procedures.  Here is how the feature should work.  When a new
procedure is defined, a formal parameter can be either a symbol as usual or
else a list of two elements.  In this case, the second element is a symbol,
the name of the formal parameter.  The first element is an expression whose
value is a predicate function that the argument must satisfy.  That function
should return <tt>#t</tt> if the argument is valid.  For example, here is a
procedure <tt>foo</tt> that has type-checked parameters <tt>num</tt> and <tt>list</tt>:

<p>
<tt>  <pre>&#62; (define (foo (integer? num) ((lambda (x) (not (null? x))) list))
    (list-ref list num))
FOO
&#62; (foo 3 '(a b c d e))
D
&#62; (foo 3.5 '(a b c d e))
Error: wrong argument type - 3.5
&#62; (foo 2 '())
Error: wrong argument type - ()
</pre></tt>

<p>
In this example we define a procedure <tt>foo</tt> with two formal parameters,
named <tt>num</tt> and <tt>list</tt>.  When <tt>foo</tt> is invoked, the evaluator
will check to see that the first actual argument is an integer and that the
second actual argument is not empty.  The expression whose value is the
desired predicate function should be evaluated with respect to <tt>foo</tt>'s
defining environment.  (Hint: Think about <tt>extend-environment</tt>.)

<p>
<br /><hr />
Unix feature of the week: <tt>echo</tt>, <tt>set</tt>, <tt>setenv</tt>, <tt>printenv</tt>
<p>
Emacs feature of the week: <tt>M-!</tt> (run shell command)
<p>

<p>