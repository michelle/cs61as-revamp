<!-- Introduction 12: Metacircular Evaluator -->

<p>
Our evaluator for Lisp will be implemented as a Lisp program.  It may
seem circular to think about evaluating Lisp programs using an
evaluator that is itself implemented in Lisp.  However, evaluation is
a process, so it is appropriate to describe the evaluation process
using Lisp, which, after all, is our tool for describing
processes. An evaluator that is written in the same language
<a name="%_idx_4212"></a><a name="%_idx_4214"></a>that it evaluates is said to be <em>metacircular</em>.<p> 
 
 
<a name="%_idx_4216"></a><a name="%_idx_4218"></a>The metacircular evaluator is essentially a Scheme formulation of the
environment model of evaluation described in
section&nbsp;3.2.  Recall that the model has two
basic parts:<p> 
 
<blockquote> 
<p>1. To evaluate a combination (a compound expression other than a 
special form), evaluate the subexpressions and then apply the value of
the operator subexpression to the values of the operand
subexpressions.<p> 
 
<p>2. To apply a compound procedure to a set of arguments, evaluate the
body of the procedure in a new environment.  To construct this
environment, extend the environment part of the procedure object by a
frame in which the formal parameters of the procedure are bound to the
arguments to which the procedure is applied.
</blockquote><p> 
 
<a name="%_idx_4220"></a>These two rules describe the essence of the evaluation process, a
basic cycle in which expressions to be evaluated in environments are
reduced to procedures to be applied to arguments, which in turn are
reduced to new expressions to be evaluated in new environments, and so
on, until we get down to symbols, whose values are looked
up in the environment, and to primitive procedures, which are applied
directly (see figure&nbsp;4.1). 
This evaluation cycle will be embodied by the interplay between the two
critical procedures in the evaluator, <tt>eval</tt> and <tt>apply</tt>,
which are described in section&nbsp;4.1.1 
(see figure&nbsp;4.1).<p> 
 
The implementation of the evaluator will depend upon procedures that
define the <em>syntax</em> of the expressions to be evaluated.  We will
use <a name="%_idx_4224"></a>data abstraction to make the evaluator independent of the
representation of the language.  For example, rather than committing
to a choice that an assignment is to be represented by a list
beginning with the symbol <tt>set!</tt> we use an abstract predicate
<tt>assignment?</tt> to test for an assignment, and we use abstract
selectors <tt>assignment-variable</tt> and <tt>assignment-value</tt> to
access the parts of an assignment.  Implementation of expressions will
be described in detail in section&nbsp;4.1.2.
There are also operations, described in
section&nbsp;4.1.3, that specify the
representation of procedures and environments.  For example, <tt>make-procedure</tt> constructs compound procedures, <tt>lookup-variable-value</tt> accesses the values of variables, and <tt>apply-primitive-procedure</tt> applies a primitive procedure to a given list
of arguments.<p></p>