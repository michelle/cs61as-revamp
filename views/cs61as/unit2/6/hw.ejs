<b>Reading:</b>
Abelson &amp; Sussman, Sections 2.4 through 2.5.2 (pages 169-200)
<p>
<b>Homework:</b>
<p>
Abelson &amp; Sussman, exercises 2.74, 2.75, 2.76, 2.77, 2.79, 2.80, 2.81, 2.83
<p>
Note: Some of these are thought-exercises; you needn't actually run any Scheme
programs for them!  (Some don't ask you to write procedures at all;
others ask for modifications to a program that isn't online.)

<p>
<font face="symbol"></font
> If you haven't already finished this week's lab exercises that
involve the <tt>scheme-1</tt> interpreter, do it now.  Then write
a <tt>map</tt> primitive for <tt>scheme-1</tt> (call it <tt>map-1</tt> so you
and Scheme don't get confused about which is which) that works
correctly for all mapped procedures.

<p>
<font face="symbol"></font
> Modify the <tt>scheme-1</tt> interpreter
to add the <tt>let</tt> special form.  Hint: Like a procedure call, <tt>let</tt>
will have to use <tt>substitute</tt> to replace certain variables with their
values.  Don't forget to evaluate the expressions that provide those
values!

<p>
<br /><hr />
Unix feature of the week: <tt>du</tt>, <tt>df</tt>, <tt>quota</tt>
<p>
Emacs feature of the week: <tt>M-q</tt> (format paragraphs), <tt>C-M-q</tt> (format Scheme code)
<p>

<p></p>