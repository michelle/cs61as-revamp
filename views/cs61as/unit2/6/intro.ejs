<!-- Introduction 6: Generic Operators -->

<p>
We have introduced data abstraction, a methodology for structuring
systems in such a way that much of a program can be specified
independent of the choices involved in implementing the data objects
that the program manipulates.  For example, we saw in
section&nbsp;2.1.1 how to separate the task of designing a
program that uses rational numbers from the task of implementing
rational numbers in terms of the computer language's primitive
mechanisms for constructing compound data.  The key idea was to erect
an abstraction barrier&mdash;in this case, the selectors and constructors
for rational numbers (<tt>make-rat</tt>, <tt>numer</tt>, <tt>denom</tt>)&mdash;that
isolates the way rational numbers are used from their underlying
representation in terms of list structure.  A similar abstraction
barrier isolates the details of the procedures that perform rational
arithmetic (<tt>add-rat</tt>, <tt>sub-rat</tt>, <tt>mul-rat</tt>, and <tt>div-rat</tt>) from the "higher-level" procedures that use rational
numbers.  The resulting program has the structure shown in
figure&nbsp;2.1.<p> 
 
These data-abstraction barriers are powerful tools for controlling
complexity.  By isolating the underlying representations of data
objects, we can divide the task of designing a large program into
smaller tasks that can be performed separately.  But this kind of data
abstraction is not yet powerful enough, because it may not always make
sense to speak of "the underlying representation" for a data object.<p> 
 
 
For one thing, there might be more than one useful representation for
a data object, and we might like to design systems that can deal with
multiple representations.  To take a simple example, complex numbers
may be represented in two almost equivalent ways: in rectangular form
(real and imaginary parts) and in polar form (magnitude and angle).
Sometimes rectangular form is more appropriate and sometimes polar
form is more appropriate.  Indeed, it is perfectly plausible to
imagine a system in which complex numbers are represented in both
ways, and in which the procedures for manipulating complex numbers work
with either representation.<p> 
 
More importantly, programming systems are often designed by many
people working over extended periods of time, subject to requirements
that change over time.  In such an environment, it is simply not
possible for everyone to agree in advance on choices of data
representation.  So in addition to the data-abstraction barriers that
isolate representation from use, we need abstraction barriers that
isolate different design choices from each other and permit different
choices to coexist in a single program.  Furthermore, since large
programs are often created by combining pre-existing modules that were
designed in isolation, we need conventions that permit programmers to
incorporate modules into larger systems <a name="%_idx_2290"></a><em>additively</em>, that is,
without having to redesign or reimplement these modules.<p> 
 
In this section, we will learn how to cope with data that may be
represented in different ways by different parts of a program.  This
requires constructing <a name="%_idx_2292"></a><a name="%_idx_2294"></a><em>generic procedures</em>&mdash;procedures that can
operate on data that may be represented in more than one way.  Our
main technique for building generic procedures will be to work in terms
of data objects that have <a name="%_idx_2296"></a><em>type tags</em>, that is, data objects
that include explicit information about how they are to be processed.
We will also discuss <a name="%_idx_2298"></a><em>data-directed</em> programming, a powerful and
convenient implementation strategy for additively assembling systems
with generic operations.<p> 
 
We begin with the simple complex-number example. We will see how
type tags and data-directed style enable us to design separate
rectangular and polar representations for complex numbers while
maintaining the notion of an abstract "complex-number" data object.
<a name="%_idx_2300"></a><a name="%_idx_2302"></a>We will accomplish this by defining arithmetic procedures for complex
numbers (<tt>add-complex</tt>, <tt>sub-complex</tt>, <tt>mul-complex</tt>, and
<tt>div-complex</tt>) in terms of generic selectors that access parts of
a complex number independent of how the number is represented.  The
resulting complex-number system, as shown in
figure&nbsp;2.19, contains two different kinds of
<a name="%_idx_2304"></a>abstraction barriers.  The "horizontal" abstraction barriers play
the same role as the ones in
figure&nbsp;2.1.  They isolate "higher-level"
operations from "lower-level" representations.  In addition, there
is a "vertical" barrier that gives us the ability to separately
design and install alternative representations.<p> 
 
<a name="%_fig_2.19"></a><p><div align=left><table width=100%><tr><td><img src="static/course_material/67/ch2-Z-G-54.gif" border="0"> 
</td></tr><caption align=bottom><div align=left><b>Figure 2.19:</b>&nbsp;&nbsp;Data-abstraction barriers in the complex-number system.</div></caption><tr><td> 
 
</td></tr></table></div><p><p> 
 
 
In section&nbsp;2.5 we will show how to use
type tags and data-directed style to develop a generic arithmetic
package.  This provides procedures (<tt>add</tt>, <tt>mul</tt>, and so on)
that can be used to manipulate all sorts of "numbers" and can be
easily extended when a new kind of number is needed.
In section&nbsp;2.5.3, we'll show how to use generic
arithmetic in a system that performs symbolic algebra.<p></p>