<!-- Lab 12: Metacircular Evaluator and Logo -->

<p>
1.  List all the procedures in the metacircular evaluator
that call <tt>eval</tt>.

<p>
2.  List all the procedures in the metacircular evaluator
that call <tt>apply</tt>.

<p>
3.  Explain why <tt>make-procedure</tt> does <i>not</i> call <tt>eval</tt>.

<p>
4.  Abelson and Sussman, exercises <a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-26.html#%_thm_4.1" target="_blank">4.1</a>, <a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-26.html#%_thm_4.2" target="_blank">4.2</a>, <a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-26.html#%_thm_4.4" target="_blank">4.4</a>, <a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-27.html#%_thm_4.5" target="_blank">4.5</a>

<p>
5. In this lab exercise you will become familiar with the Logo programming
language, for which you'll be writing an interpreter in project 4.

<p>
To begin, type <tt>logo</tt> at the Unix shell prompt - <b>not</b> from
Scheme!  You should see something like this:

<p>
<tt>  <pre>Welcome to Berkeley Logo version 5.5
? 
</pre></tt>

<p>
The question mark is the Logo prompt, like the <tt>&#62;</tt> in Scheme.  (Later, in
some of the examples below, you'll see a <tt>&#62;</tt> prompt from Logo, while in
the middle of defining a procedure.)

<p>
5a.  Type each of the following instruction lines and note the results.  (A few
of them will give error messages.)  If you can't make sense of a result, ask
for help.

<p>
 
<p>
<tt>  <pre>print 2 + 3

print 2+3

print sum 2 3

print (sum 2 3 4 5)

print sum 2 3 4 5

2+3

print "yesterday

print "julia"

print revolution

print [blue jay way]

show [eight days a week]

show first [golden slumbers]

print first bf [she loves you]

pr first first bf [yellow submarine]

to second :stuff
output first bf :stuff
end

second "something

print second "piggies

pr second [another girl]

pr first second [carry that weight]
pr second second [i dig a pony]

to pr2nd :thing
print first bf :thing
end

pr2nd [the 1 after 909]

print first pr2nd [hey jude]

repeat 5 [print [this boy]]

if 3 = 1+1 [print [the fool on the hill]]

print ifelse 2=1+1 &#126;
      [second [your mother should know]] &#126;
      [first "help]

print ifelse 3=1+2 &#126;
      [strawberry fields forever] &#126;
      [penny lane]

print ifelse 4=1+2 &#126;
      ["flying] &#126;
      [[all you need is love]]

to greet :person
say [how are you,]
end

to say :saying
print sentence :saying :person
end

greet "ringo

show map "first [paperback writer]

show map [word first ? last ?] &#126;
         [lucy in the sky with diamonds]

to who :sent
foreach [pete roger john keith] "describe
end

to describe :person
print se :person :sent
end

who [sells out]

print :bass

make "bass "paul

print :bass

print bass

to bass
output [johnny cymbal]
end

print bass

print :bass

print "bass

to countdown :num
if :num=0 [print "blastoff stop]
print :num
countdown :num-1
end

countdown 5

to downup :word
print :word
if emptyp bl :word [stop]
downup bl :word
print :word
end

downup "rain

;;;; The following stuff will work
;;;; only on an X workstation:

cs

repeat 4 [forward 100 rt 90]

cs

repeat 10 [repeat 5 [fd 150 rt 144] rt 36]

cs repeat 36 [repeat 4 [fd 100 rt 90] 
              setpc remainder pencolor+1 8
              rt 10]

to tree :size
if :size &lt; 3 [stop]
fd :size/2
lt 30 tree :size*3/4 rt 30
fd :size/3
rt 45 tree :size*2/3 lt 45
fd :size/6
bk :size
end

cs pu bk 100 pd ht tree 100
</pre></tt>

<p>
5b. Devise an example that demonstrates that Logo uses dynamic scope
rather than lexical scope.  
Your example should involve the use of a variable
that would have a different value if Logo used lexical scope.
Test your code with Berkeley Logo.

<p> 5c.  Explain the differences and similarities among the Logo operators
<tt>"</tt>&nbsp;(double-quote), <tt>[&nbsp;]</tt>&nbsp;(square brackets), and
<tt>:</tt>&nbsp;(colon).</p>