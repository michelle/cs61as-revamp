<!-- Lecture Notes 12: Metacircular Evaluator -->
<p>
<B>Reading:</b>
Abelson &amp; Sussman, Sections
<a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-25.html">4.1.1&ndash;4.1.6</a>
<p>

<p>
We're going to investigate SICP's Scheme interpreter written in Scheme.  This
interpreter implements the environment model of evaluation.

<p>
Here's a reminder of the reasons I mentioned in week 6 for studying a
Scheme interpreter in Scheme, even though it's obviously not something
you'd use in practice:

<p>

<ul>
<li>It helps you understand the environment model.
<li>It lets us experiment with modifications to Scheme (new features).
<li>Even real Scheme interpreters are largely written in Scheme.
<li>It illustrates a big idea:&nbsp;<i>universality</i>.
</ul>

<p>Universality means we can write <i>one program</i> that's equivalent to all
other programs.  At the hardware level, this is the idea that made
general-purpose computers possible.  It used to be that they built a
separate machine, from scratch, for every new problem.  An intermediate
stage was a machine that had a <i>patchboard</i> so you could rewire it,
effectively changing it into a different machine for each problem, without
having to re-manufacture it.  The final step was a single machine that
accepted a program <i>as data</i> so that it can do any problem without
rewiring.

<p>
Instead of a function machine that computes a particular function, taking
(say) a number in the input hopper and returning another number out the
bottom, we have a <i>universal</i> function machine that takes <i>a
function machine</i> in one input hopper, and a number in a second hopper,
and returns whatever number the input machine would have returned.  This is
the ultimate in data-directed programming.

<p><center><img width=50% src="static/course_material/103/104/12-1.jpg"></center>

<p>
Our Scheme interpreter leaves out some of the important components of a real
one.  It gets away with this by taking advantage of the capabilities of the
underlying Scheme.  Specifically, we don't deal with storage allocation,
tail recursion elimination, or implementing any of the Scheme primitives.
All we <i>do</i> deal with is the evaluation of expressions.  That turns
out to be quite a lot in itself, and pretty interesting.

<p>
Here is a one-screenful version of the metacircular evaluator with most of
the details left out.  You might want to compare it to the one-screenful
substitution-model interpreter you saw in week 6.

<p>
<tt>  <pre>;;;;;                        In file cs61as/lectures/4.1/micro.scm
(define (scheme)
  (display &#187; ")
  (print (eval (read) the-global-environment))
  (scheme) )

(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((symbol? exp) (lookup-in-env exp env))
        ((special-form? exp) (do-special-form exp env))
        (else (apply (eval (car exp) env)
                     (map (lambda (e) (eval e env)) (cdr exp)) ))))

(define (apply proc args)
  (if (primitive? proc)
      (do-magic proc args)
      (eval (body proc)
            (extend-environment (formals proc)
                                args
                                (proc-env proc) ))))
</pre></tt>

<p>
Although the version in the book is a lot bigger, this really does capture
the essential structure, namely, a mutual recursion between <tt>eval</tt>
(evaluate an expression relative to an environment) and <tt>apply</tt> (apply a
function to arguments).  To evaluate a compound expression means to evaluate
the subexpressions recursively, then apply the <tt>car</tt> (a function) to the
<tt>cdr</tt> (the arguments).  To apply a function to arguments means to
evaluate the body of the function in a new environment.

<p>
What's left out?  Primitives, special forms, and a lot of details.

<p>
In that other college down the peninsula, they wouldn't consider you ready
for an interpreter until junior or senior year.  At this point in the
introductory course, they'd still be teaching you where the semicolons go.
How do we get away with this?  We have two big advantages:

<p>

<ul>
<li>The <i>source language</i> (the language that we're interpreting) is
simple and uniform.  Its entire formal syntax can be described in one page,
as we did in week 7.  There's hardly anything to implement!
<li>The <i>implementation language</i> (the one in which the interpreter
itself is written) is powerful enough to handle a program as data, and to
let us construct data structures that are both hierarchical and circular.
</ul>

<p>The amazing thing is that the simple source language and the powerful
implementation language are both Scheme!  You might think that a powerful
language has to be complicated, but it's not so.

<p>

<p>
<b>&bull; Introduction to Logo.</b>  For the programming project you're turning
the metacircular evaluator into an interpreter for a <i>different</i>
language, Logo.  To do that you should know a little about Logo itself.

<p>
Logo is a dialect of Lisp, just as Scheme is, but its design has different
priorities.  The goal was to make it as natural-seeming as possible for
kids. That means things like getting rid of all those parentheses, and that
has other syntactic implications.

<p>
(To demonstrate Logo, run <tt>&#126;cs61as/logo</tt> which is Berkeley Logo.)

<p>
Commands and operations:  In Scheme, every procedure returns a value, even
the ones for which the value is unspecified and/or useless, like <tt>
define</tt> and <tt>print</tt>.  In Logo, procedures are divided into operations,
which return values, and commands, which don't return values but are called
for their effect.  You have to start each instruction with a command:

<p>
<tt>  <pre>print sum 2 3
</pre></tt>

<p>
Syntax:  If parentheses aren't used to delimit function calls, how do you
know the difference between a function and an argument?  When a symbol is
used without punctuation, that means a function call.  When you want the
value of a variable to use as an argument, you put colon in front of it.

<p>
<tt>  <pre>make "x 14
print :x
print sum :x :x
</pre></tt>

<p>
Words are quoted just as in Scheme, except that the double-quote character
is used instead of single-quote.  But since expressions aren't represented
as lists, the same punctuation that delimits a list also quotes it:

<p>
<tt>  <pre>print [a b c]
</pre></tt>

<p>
(Parentheses <i>can</i> be used, as in Scheme, if you want to give extra
arguments to something, or indicate infix precedence.)

<p>
<tt>  <pre>print (sum 2 3 4 5)
print 3*(4+5)
</pre></tt>

<p>
No special forms:  Except <tt>to</tt>, the thing that defines a new procedure,
all Logo primitives evaluate their arguments.  How is this possible?  We
"proved" back in chapter 1 that <tt>if</tt> has to be a special form.  But
instead we just quote the arguments to <tt>ifelse</tt>:

<p>
<tt>  <pre>ifelse 2=3 [print "hi] [print "bye]
</pre></tt>

<p>
You don't notice the quoting since you get it for free with the list
grouping.

<p>
Functions not first class:  In Logo every function has a name; there's no
<tt>lambda</tt>.  Also, the namespace for functions is separate from the one
for variables; a variable can't have a function as its value.  (This is
convenient because we can use things like <tt>list</tt> or <tt>sentence</tt> as
formal parameters without losing the functions by those names.)  That's
another reason why you need colons for variables.

<p>
So how do you write higher-order functions like <tt>map</tt>?  Two answers.
First, you can use the <i>name</i> of a function as an argument, and you
can use that name to construct an expression and eval it with <tt>run</tt>.
Second, Logo has first-class <i>expressions</i>; you can <tt>run</tt> a list
that you get as an argument.  (This raises issues about the scope of
variables that we'll explore later this week.)

<p>
<tt>  <pre>print map "first [the rain in spain]
print map [? * ?] [3 4 5 6]
</pre></tt>

<p>

<p>

<p>
<b>&bull; Data abstraction in the evaluator.</b>  Here is a quote from the
Instructor's Manual, regarding section 4.1.2:

<p>
"Point out that this section is boring (as is much of section 4.1.3), and
explain why:  Writing the selectors, constructors, and predicates that
implement a representation is often uninteresting.  It is important to say
explicitly what you expect to be boring and what you expect to be
interesting so that students don't ascribe their boredom to the wrong aspect
of the material and reject the interesting ideas.  For example, data
abstraction isn't boring, although writing selectors is.  The details of
representing expressions (as given in section 4.1.2) and environments (as
given in section 4.1.3) are mostly boring, but the evaluator certainly
isn't."

<p>
I actually think they go overboard by having a separate ADT for every kind
of homogeneous sequence.  For example, instead of <tt>first-operand</tt> and
<tt>rest-operands</tt> I'd just use <tt>first</tt> and <tt>rest</tt> for all
sequences.  But things like <tt>operator</tt> and <tt>operands</tt> make sense.

<p>

<p>
<b>&bull; Dynamic scope.</b>
Logo uses dynamic scope, which we discussed in Section 3.2, instead
of Scheme's lexical scope.  There are advantages and disadvantages to both
approaches.

<p>
Summary of arguments for lexical scope:

<p>

<ul>
<li>Allows local state variables (OOP).
<li>Prevents name "capture" bugs.
<li>Faster compiled code.
</ul>

<p>Summary of arguments for dynamic scope:

<p>

<ul>
<li>Allows first-class expressions (WHILE).
<li>Easier debugging.
<li>Allows "semi-global" variables.
</ul>

<p>Lexical scope is required in order to make possible Scheme's approach to
local state variables.  That is, a procedure that has a local state variable
must be defined within the scope where that variable is created, and must
carry that scope around with it.  That's exactly what lexical scope
accomplishes.

<p>
On the other hand, (1) most lexically scoped languages (e.g., Pascal) don't
have <tt>lambda</tt>, and so they can't give you local state variables despite
their lexical scope.  And (2) lexical scope is needed for local state
variables only if you want to implement the latter in the particular way
that we've used.  Object Logo, for example, provides OOP without relying on
<tt>lambda</tt> because it includes local state variables as a primitive
feature.

<p>
Almost all computer scientists these days hate dynamic scope, and the reason
they give is the one about name captures.  That is, suppose we write
procedure P that refers to a global variable V.  Example:

<p>
<tt>  <pre>(define (area rad)
  (* pi rad rad))
</pre></tt>

<p>
This is intended as a reference to a global variable <tt>pi</tt> whose value,
presumably, is 3.141592654.  But suppose we invoke it from within another
procedure like this:

<p>
<tt>  <pre>(define (mess-up pi)
  (area (+ pi 5)))
</pre></tt>

<p>
If we say <tt>(mess-up&nbsp;4)</tt> we intend to find the area of a circle with
radius 9.  But we won't get the right area if we're using dynamic scope,
because the name <tt>pi</tt> in procedure <tt>area</tt> suddenly refers to the
local variable in <tt>mess-up</tt>, rather than to the intended global value.

<p>This argument about naming bugs is particularly compelling to people who
envision a programming project in which 5000 programmers work on tiny slivers
of the project, so that nobody knows what anyone else is doing.  In such a
situation it's entirely likely that two programmers will happen to use the
same name for different purposes.  But note that we had to do something pretty
foolish&mdash;using the name <tt>pi</tt> for something that isn't &pi; at
all&mdash;in order to get in trouble.

<p>
Lexical scope lets you write compilers that produce faster executable
programs, because with lexical scope you can figure out during compilation
exactly where in memory any particular variable reference will be.  With
dynamic scope you have to defer the name-location correspondence until the
program actually runs.  This is the real reason why people prefer lexical
scope, despite whatever they say about high principles.

<p>

<p>
As an argument for dynamic scope, consider this Logo implementation of the
<tt>while</tt> control structure:

<p>
<tt>  <pre>to while :condition :action
if not run :condition [stop]
run :action
while :condition :action
end

to example :x
while [:x &#62; 0] [print :x make "x :x-1]
end

? example 3
3
2
1
</pre></tt>

<p>
This wouldn't work with lexical scope, because within the procedure <tt>
while</tt> we couldn't evaluate the argument expressions, because the variable
<tt>x</tt> is not bound in any environment lexically surrounding <tt>while</tt>.
Dynamic scope makes the local variables of <tt>example</tt> available to <tt>
while</tt>.  That in turn allows first-class expressions.  (That's what Logo
uses in place of first-class functions.)

<p>
There are ways to get around this limitation of lexical scope.  If you
wanted to write <tt>while</tt> in Scheme, basically, you'd have to make it a
special form that turns into something using thunks.  That is, you'd have
to make

<p>
<tt>  <pre>(while cond act)
</pre></tt>

<p>
turn into

<p>
<tt>  <pre>(while-helper (lambda () cond) (lambda () act))
</pre></tt>

<p>
But the Logo point of view
is that it's easier for a beginning programmer to understand first-class
expressions than to understand special forms and thunks.

<p>
Most Scheme implementations include a debugger that allows you to examine
the values of variables after an error.  But, because of the complexity of
the scope rules, the debugging language isn't Scheme itself.  Instead you
have to use a special language with commands like "switch to the
environment of the procedure that called this one." In Logo, when an error
happens you can <i>pause</i> your program and type ordinary Logo
expressions in an environment in which all the relevant variables are
available.  For example, here is a Logo program:

<p>

<p>
<tt>  <pre>;;;;;                        In file cs61as/lectures/4.1/bug.logo
to assq :thing :list
if equalp :thing first first :list [op last first :list]
op assq :thing bf :list
end

to spell :card
pr (se assq bl :card :ranks &#246;f assq last :card :suits)
end

to hand :cards
if emptyp :cards [stop]
spell first :cards
hand bf :cards
end

make "ranks [[a ace] [2 two] [3 three] [4 four] [5 five] [6 six] [7 seven]
             [8 eight] [9 nine] [10 ten] [j jack] [q queen] [k king]]
make &#223;uits [[h hearts] [s spades] [d diamonds] [c clubs]]

? hand [10h 2d 3s]
TEN OF HEARTS
TWO OF DIAMONDS
THREE OF SPADES
</pre></tt>

<p>
Suppose we introduce an error into <tt>hand</tt> by changing the recursive call
to

<p>
<tt>  <pre>hand first bf :cards
</pre></tt>

<p>then say

<p><tt><pre>? make "erract [pause]
? hand [10h 2d 3s]
</pre></tt>

<p>
The result will be an error message in <tt>assq</tt>-two procedure calls
down-complaining about an empty argument to <tt>first</tt>.  Although the
error is caught in <tt>assq</tt>, the real problem is in <tt>hand</tt>.  In Logo
we can say <tt>pons</tt>, which stands for "print out names," which means to
show the values of <i>all</i> variables accessible at the moment of the
error.  This will include the variable <tt>cards</tt>, so we'll see that the
value of that variable is a single card instead of a list of cards.

<p>
Finally, dynamic scope is useful for allowing "semi-global" variables.
Take the metacircular evaluator as an example.  Lots of procedures in it
require <tt>env</tt> as an argument, but there's nothing special about the
value of <tt>env</tt> in any one of those procedures.  It's almost always just
the current environment, whatever that happens to be.  If Scheme had dynamic
scope, <tt>env</tt> could be a parameter of <tt>eval</tt>, and it would then
automatically be available to any subprocedure called, directly or
indirectly, by <tt>eval</tt>.  (This is the flip side of the name-capturing
problem; in this case we <i>want</i> <tt>eval</tt> to capture the name <tt>
env</tt>.)

<p>
<b>&bull; Environments as circular lists.</b>  When we first saw circular lists
in chapter 2, they probably seemed to be an utterly useless curiosity,
especially since you can't print one.  But in the MC evaluator, every
environment is a circular list, because the environment contains procedures
and each procedure contains a pointer to the environment in which it's
defined.  So, moral number 1 is that circular lists are useful; moral number
2 is not to try to trace a procedure in the evaluator that has an
environment as an argument!  The tracing mechanism will take forever to try
to print the circular argument list.

<p>