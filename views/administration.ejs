<div id="nocenter">
  <div id="homework">
<h2>Course Administration</h2><P>Welcome to Self-Paced CS 61A, <i>Structure and Interpretation of Computer
Programs</i> (<i>SICP</i>)!
 
<P>Since this is the first time we're offering this version of 61A, most
of the details below are subject to change as we discover what doesn't work.
Please try to be patient with any problems that come up.
 
<P><TABLE><TR><TD><A href="#meetings">Class Meetings</A></TR> 
<TR><TD><A href="#textbook">Textbook(s)</A></TR> 
<TR><TD><A href="#staff">Staff and Other Human Resources</A></TR> 
<TR><TD><A href="#software">Software</A></TR> 
<TR><TD><A href="#lessons">Units and Lessons</A></TR> 
<TR><TD><A href="#grades">Course Credits and Grading</A></TR> 
<TR><TD><A href="#deadlines">Deadlines</A></TR> 
<TR><TD><A href="#honors">Honors Option</A></TR> 
<TR><TD><A href="#cheating">Academic Honesty</A></TR> 
</TABLE> 
 
<A name="meetings"><H4>Class Meetings</H4> 
 
<P>All class meetings are in our computer lab, 273 Soda Hall.  (The main
entrances to Soda are on the third and fourth floors, so you want to go
<i>down</i> after entering the building.  There is also a semi-secret
second floor entrance via the Hearst Avenue entrance to Etcheverry Hall,
the building downhill from Soda.)
 
<P>You are expected to attend every class meeting.  If there's some
special reason (e.g., a physical disability) why you should be an
exception, work out a plan with your TA.
 
<A name="textbook"><H4>Textbook(s)</H4> 
 
<P>The <i>SICP</i> textbook, by Harold Abelson and Gerald Jay Sussman
with Julie Sussman, is available online (free)
<A HREF="http://www-mitpress.mit.edu/sicp/full-text/book/book.html">here</A>.
It is the best computer science book ever written!  The writing is terse;
each sentence repays careful reading.
 
<P>Those students whose prior experience does not include programming recursive
functions, or does not include the Scheme language, or does not include
computer programming at all, will start with excerpts from
<i>Simply Scheme</i>, by Brian Harvey and Matthew Wright, a book written
specifically as a "prequel" to <i>SICP</i>.  The entire book is also
available online
<A HREF="http://www.eecs.berkeley.edu/~bh/ss-toc2.html">here</A>.
 
<P>There are also some online documents that are required reading in
certain lessons.  These can be found by clicking the "Reader" link at the
left of this web page.  Note: The "Reader" page is taken from the course
reader of the old lecture-based 61A, so some of it isn't quite right for
this course.  In particular, this course doesn't have midterms, but the
sample midterms in the reader provide examples of the kind of question
we ask in the lesson quizzes (explained below).
 
<A name="staff"><H4>Staff and Other Human Resources</H4> 
 
<P>The instructor of this course is
<A HREF="http://cs.berkeley.edu/~bh">Brian Harvey</A>,
<A HREF="mailto:bh@cs.berkeley.edu">bh@cs.berkeley.edu</A>,
781 Soda Hall, 642-8311.  Office hours when I'm in town are Mon 10-11:30,
Tue 4-6, or send email to make an appointment.
 
<P>For most administrative and intellectual problems, your first point of
contact will be your TA:
 
<P><TABLE> 
<TR><TH>Section<TH>Times&nbsp;&nbsp;<TH>TA&nbsp;&nbsp;<TH>Email<TH>Office Hours</TR> 
<TR><TD>194-18<TD>TuTh 1&ndash;4pm<TD>Darren Kuo
<TD><A
HREF="mailto:cs61as-tb@imail.eecs.berkeley.edu">cs61as-tb@imail.eecs.berkeley.edu</A> 
<TD>W 12-1 at Soda 283E
</TR> 
<TR><TD>194-19<TD>TuTh 10am&ndash;1pm&nbsp;&nbsp;
<TD>Pedro Amaral&nbsp;&nbsp;
<TD><A
HREF="mailto:cs61as-tc@imail.eecs.berkeley.edu">cs61as-tc@imail.eecs.berkeley.edu</A> 
<TD>Th 4-5 at Soda 283E
</TR><TR><TD>194-20<TD>WF 1&ndash;4pm<TD><a href="http://inst.eecs.berkeley.edu/~cs61as-td">Ken Cheng</a> 
<TD><A
HREF="mailto:cs61as-td@imail.eecs.berkeley.edu">cs61as-td@imail.eecs.berkeley.edu</A> 
<TD>F 10-11A at Soda 283E
</TR></TABLE> 
 
<P><TABLE><TR> 
<TD><img width=180px src="http://inst.eecs.berkeley.edu/~cs61as/fa11/Brian.jpg"> 
&nbsp;&nbsp;
<TD><img width=180px src="http://inst.eecs.berkeley.edu/~cs61as/fa11/Darren_Kuo.jpg"> 
&nbsp;&nbsp;
<TD><img width=180px src="http://inst.eecs.berkeley.edu/~cs61as/fa11/Pedro.jpg"> 
&nbsp;&nbsp;
<TD><img width=180px src="http://inst.eecs.berkeley.edu/~cs61as/fa11/Ken.jpg"> 
&nbsp;
</TR><TR><TD align=center>Brian
&nbsp;&nbsp;
<TD align=center>Darren
&nbsp;&nbsp;
<TD align=center>Pedro
&nbsp;&nbsp;
<TD align=center>Ken
</TR></TABLE> 
 
<p>For questions about homework or project grading, you can consult your
reader, but if it's a grading complaint, you should click the "Complaint form"
link on the web page, which will both send your reader an email and keep a
record of your problem so we can make sure they all get solved!
 
<P><TABLE> 
<TR><TH><u>last</u> letter of class login&nbsp;&nbsp;&nbsp;&nbsp;
<TH>Reader&nbsp;&nbsp;<TH>Email</TR> 
<TR><TD><tt>acegikmoqsuwy</tt><td>Andrew Huang&nbsp;&nbsp;&nbsp;
<TD><A
HREF="mailto:cs61as-rb@imail.eecs.berkeley.edu">cs61as-rb@imail.eecs.berkeley.edu</A> 
</TR><TR><TD><tt>bdfhjlnprtvxz</tt><td>Yuheng Feng
<TD><A
HREF="mailto:cs61as-rc@imail.eecs.berkeley.edu">cs61as-rc@imail.eecs.berkeley.edu</A> 
</TR></TABLE> 
 
<P><TABLE><TR> 
<TD><img width=180px src="http://inst.eecs.berkeley.edu/~cs61as/fa11/Andrew.jpg"> 
&nbsp;&nbsp;
<TD><img width=180px src="http://inst.eecs.berkeley.edu/~cs61as/fa11/Yuheng.jpg"> 
&nbsp;
</TR><TR><TD align=center>Andrew
&nbsp;&nbsp;
<TD align=center>Yuheng
</TR></TABLE> 
 
<P>Another resource for intellectual questions is our
<A HREF="https://www.piazza.com/class/cs61as">online discussion group</A> 
(also linked under "Piazza" in the sidebar on the left),
where you can get answers from other students and from the course staff.
Don't post individual administrative questions ("Why did I get 5 points...")
on the discussion group.  To enroll in the group, follow
<a href="https://www.piazza.com/berkeley/fall2011/cs61as">this link</a>.
 
<P>Tutoring services are provided by Eta Kappa Nu (HKN), the EECS honors
society (345 Soda, hkn@hkn), and Upsilon Pi Epsilon, the Computer
Science honors society (346 Soda, upe@cory).
 
<A name="software"><H4>Software</H4> 
 
<P>If you have a home computer, you may want to get a Scheme interpreter for
it.  The Computer Science Division can provide you with free versions of
Scheme for Linux, Windows, or MacOS.  The distribution also includes the
Scheme library programs that we use in this course.  You can
dowload copies of this distribution
<A HREF="http://inst.EECS.Berkeley.EDU/~scheme">here</A>.
 
<P>Once you've downloaded the software, be sure that you run the
application called "<code>stk-simply</code>" rather than just
"<code>stk</code>."  (The lab computers are set up so that <code>stk</code> 
does the right thing, but your home computer isn't.)
 
<A name="lessons"><H4>Units and Lessons</H4> 
 
<P>The course is organized into six "units" numbered 0 through 5.
Unit 0 is the introductory material for students whose prior experience
does not include programming recursive functions in Scheme.  Units 1
through 5 correspond to chapters of the <i>SICP</i> textbook.  This is
a <i>variable credit</i> course; you earn one UCB credit unit for each
of course units 1 through 5 that you complete successfully.  (Unit 0
does not earn credit.)  This means
that if you work at a slower pace, you can earn, e.g., two units of A
instead of four units of F, and then finish the course next semester.
Units 1 through 3 are the minimum requirement to meet the 61A prerequisite
for later CS courses, but students are very strongly urged to complete
unit 4 also, to have an experience equivalent to the lecture-based 61A.
 
<P>The online material is organized in terms of "lessons"; for the most part,
one lesson is roughly equivalent to a week in the lecture-based version of
61A.  Lessons are named, e.g., 2.4 for the fourth lesson within unit 2.
Each lesson contains in-class lab activities and homework, mostly taken
from the textbook, for you to do on your own.  After you submit each homework
assignment, you can see our solutions to the lesson's problems; you should be
sure to read these and compare our solutions to yours to ensure that you
understand the concepts of the lesson.
 
<P>Each lesson ends with a link to the reading for the following lesson.
<b>Do the reading <i>before</i> you do the next lab!</b>  And then probably
read it again before doing the homework.
 
<P>The purpose of the homework and lab exercises is for you to learn the
course, not to prove that you already know it.  Therefore, the unit homeworks
are not graded on the correctness of your solutions, but on effort.  <b>You
will get full credit for an entirely wrong answer that shows reasonable
effort!</b> (But you should test your work.  If your solution is incorrect,
the grader will want to see some evidence that you know it's incorrect.)
 
<P>Each lesson in units 1&ndash;4 also includes both video and notes from a
previous semester of the lecture-based 61A.  Don't watch the videos in the
lab!  You need not watch them at all, but they're available to you to watch at
home.  It's probably wise at least to read the lecture notes.
 
<P>Most of the homeworks include problems labelled as "Extra for
Experts."  These problems are entirely optional; do them only if you
have finished the regular assignment and want to do something more
challenging.  There is no extra <i>credit</i> for these problems;
people who need more credit shouldn't even be trying them, and people
who are doing well in the course should be motivated by the desire to learn.
 
<A name="grades"><H4>Course Credits and Grading</H4> 
 
<P>After completing each lesson, and reading the online solutions, you should
ask your TA in lab to give you a quiz on the lesson.  (You must submit the
homework before you can take the quiz.)  The quiz will be
randomly generated from a bank of questions.  A typical quiz will have one
<i>analytic</i> question, in which you are given a program and asked to
describe something about its behavior; one <i>synthetic</i> question, in which
you are asked to write a short computer program; and one <i>expert</i> 
question, pushing the limits of what we expect the best students to
accomplish.  You must answer the first two correctly to go on to the next
lesson; if not, you can review the lesson at your own pace and then retake the
quiz (with different questions) until you do pass it.  (You may not retake
the quiz on the same day; study the lesson first!)  Answering the first two
questions counts roughly as a B; answering all three correctly is an A.
The quizzes are closed book, but don't study for them by trying to memorize
details; any program examples you need for a quiz question will be provided
in the question itself.
 
<P>Grading is done using a point system.  Each unit has approximately 75
points.  (It's approximate because different units have different numbers
of lessons, and different project weights.)  Points are assigned for
homework (two points for any serious effort, right or wrong; negative
points for copied solutions), quizzes (usually 10 points altogether),
projects (15 or 25 points), and a section of the final exam (about 8
points per unit;
we have to have a final, but it doesn't have to count much).
 
<P>At the left side of the web page is a link called "Complaint form"
that can be used to register complaints about missing or disputed grades.
 
<P>At the end of the semester, you get to say how many consecutive units
to grade you on (but you must reach at least unit 2).  Then we add up
the points scored on those units divided by the maximum possible for those
units.  The letter grade is based on that fraction:
 
<P><table align=center ><tr><td>A+ 94&ndash;100%&nbsp;&nbsp;&nbsp;  
<td>A 92&ndash;93%&nbsp;&nbsp;&nbsp;  <td>A&minus; 90&ndash;91%</tr> 
<tr><td>B+ 84&ndash;89%   <td>B 79&ndash;83%   <td>B&minus; 74&ndash;78%</tr> 
<tr><td>C+ 71&ndash;73%   <td>C 69&ndash;70%   <td>C&minus; 67&ndash;68%</tr> 
<tr><td>D+ 63&ndash;66%   <td>D 60&ndash;62%   <td>D&minus; 57&ndash;59%</tr> 
</table> 
 
<P>The range of scores within the B range is deliberately larger than
the range for other grades; the expectation is that the average grade
will be somewhere in the B range.
 
<A name="deadlines"><H4>Deadlines</H4> 
 
<p>In order to make sure that people don't leave things to the last minute, we've
established deadlines for completing each unit:
 
<p><ul><li>Unit 1: Friday, 10/7
<li>Unit 2: Friday, 10/28
<li>Unit 3: Friday, 12/2 (last day of classes)</ul> 
 
<p>These deadlines are for labs, homeworks, and quizzes. (You must submit the
homework for a lesson before you take the quiz.)
 
<p><b>The penalty for missing a deadline is 50% credit for things completed within
one week of the deadline, 0% after that.</b> 
 
These are minimal deadlines; they were computed on the basis of a student who
needs to do all of unit 0 and will only get through unit 3 this semester. For
your information, here are guidelines for completion dates for students who
want to finish four units this semester:
 
<p><ul><li>Unit 1: Wed 9/28
<li>Unit 2: Fri 10/14
<li>Unit 3: Wed 11/9
<li>Unit 4: Fri 12/2</ul> 
 
<p>(If you want to get through unit 5, you'd better not need our help in
scheduling your time! :-)
 
<p>"What if I only want to finish two units this semester?" You're not allowed
to <i>plan</i> to finish only two units. That's a worst-case fallback for
students who unexpectedly have a lot of trouble in unit 3!
 
<A name="honors"><H4>Honors Option</H4> 
 
<P>Different students will progress through the course at different
speeds, and that's fine.  In order to complete units 1&ndash;4 in one
semester, though, you should plan to pace yourself at one lesson per
week.  Students who complete lessons <i>faster</i> than that will be
offered optional lessons, consisting of <i>SICP</i> sections we have
traditionally skipped over in 61A for lack of time, one at the end of
unit 3 and one at the end of unit 4.  Unit 5 (consisting
of chapter 5 of <i>SICP</i>) is similarly optional.  If you successfully
complete
four of the six optional lessons, your registration is retroactively
changed to CS H61A, <i>Honors</i> Structure and Interpretation of
Computer Programs.  (But don't rush through the required part of the
course faster than you can learn it!  It's better to get an A in CS61AS
than a C in H61A.)
 
<A name="cheating"><H4>Academic Honesty</H4> 
 
<P>I believe that most students come to Berkeley because they want to learn,
and therefore understand that ultimately <i>it is you who suffer</i> if you
turn in someone else's work as your own.
 
<P>Nevertheless, there is the possibility of misunderstanding, because in
this class (as in most others) you are <i>encouraged</i> to learn from each
other as well as from the course staff.  That's why it's worth spelling out
the rules.
 
<P>Each lesson in this course has exercises labelled "Lab Activity" and
other exercises labelled "Homework."  The lab exercises are not turned
in for credit.  You should try each exercise on your own first, but you
are welcome to ask anyone for help if you need it.  (But bear in mind
that in a self-paced course the student next to you may be working on
something different from you.)  Lab exercises are an introduction to the
lesson's ideas, and the goal is for you to understand what they're asking
by the end of the lab activity.  So working together is fine, but don't
just blindly type in someone else's solution without understanding it.
 
<P>For the homeworks, remember that you are graded on effort, not on
correctness.  If two students turn in identical solutions to a homework,
that just tells us that at least one of them didn't make the effort to
learn.  You are welcome to <i>discuss</i> the homework with anyone, but
the solution you turn in must be entirely your own.
 
<P>For programming projects, quizzes, and the final exam, of course,
it is a serious violation of academic honesty (which can get you suspended
or expelled from the university) to give or accept answers to or from
another student.  (Exception: Some programming projects can be done in
pairs.  Your TA will explain this when you get to them.)
  </div>
</div>